/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AboutRouteImport } from "./routes/about";
import { Route as ActivityFriendsRouteImport } from "./routes/activity.friends";
import { Route as ActivityLocalRouteImport } from "./routes/activity.local";
import { Route as AddBottleRouteImport } from "./routes/addBottle";
import { Route as AddEntityRouteImport } from "./routes/addEntity";
import { Route as AddFlightRouteImport } from "./routes/addFlight";
import { Route as AdminRouteImport } from "./routes/admin";
import { Route as AdminBadgesRouteImport } from "./routes/admin.badges";
import { Route as AdminBadgesBadgeIdRouteImport } from "./routes/admin.badges.$badgeId";
import { Route as AdminBadgesBadgeIdEditRouteImport } from "./routes/admin.badges.$badgeId.edit";
import { Route as AdminBadgesAddRouteImport } from "./routes/admin.badges.add";
import { Route as AdminEventsRouteImport } from "./routes/admin.events";
import { Route as AdminEventsEventIdRouteImport } from "./routes/admin.events.$eventId";
import { Route as AdminEventsEventIdEditRouteImport } from "./routes/admin.events.$eventId.edit";
import { Route as AdminEventsAddRouteImport } from "./routes/admin.events.add";
import { Route as AdminIndexRouteImport } from "./routes/admin.index";
import { Route as AdminLocationsRouteImport } from "./routes/admin.locations";
import { Route as AdminLocationsCountrySlugRouteImport } from "./routes/admin.locations.$countrySlug";
import { Route as AdminLocationsCountrySlugEditRouteImport } from "./routes/admin.locations.$countrySlug.edit";
import { Route as AdminLocationsCountrySlugIndexRouteImport } from "./routes/admin.locations.$countrySlug.index";
import { Route as AdminLocationsCountrySlugRegionsRegionSlugRouteImport } from "./routes/admin.locations.$countrySlug.regions.$regionSlug";
import { Route as AdminLocationsCountrySlugRegionsRegionSlugEditRouteImport } from "./routes/admin.locations.$countrySlug.regions.$regionSlug.edit";
import { Route as AdminLocationsCountrySlugRegionsAddRouteImport } from "./routes/admin.locations.$countrySlug.regions.add";
import { Route as AdminQueueRouteImport } from "./routes/admin.queue";
import { Route as AdminSitesRouteImport } from "./routes/admin.sites";
import { Route as AdminSitesSiteIdRouteImport } from "./routes/admin.sites.$siteId";
import { Route as AdminSitesSiteIdEditRouteImport } from "./routes/admin.sites.$siteId.edit";
import { Route as AdminSitesSiteIdIndexRouteImport } from "./routes/admin.sites.$siteId.index";
import { Route as AdminSitesSiteIdReviewsRouteImport } from "./routes/admin.sites.$siteId.reviews";
import { Route as AdminSitesAddRouteImport } from "./routes/admin.sites.add";
import { Route as AdminTagsRouteImport } from "./routes/admin.tags";
import { Route as AdminTagsTagIdRouteImport } from "./routes/admin.tags.$tagId";
import { Route as AdminTagsTagIdEditRouteImport } from "./routes/admin.tags.$tagId.edit";
import { Route as AdminTagsAddRouteImport } from "./routes/admin.tags.add";
import { Route as AdminUsersRouteImport } from "./routes/admin.users";
import { Route as BadgesBadgeIdRouteImport } from "./routes/badges.$badgeId";
import { Route as BottlersIndexRouteImport } from "./routes/bottlers.index";
import { Route as BottlesBottleIdRouteImport } from "./routes/bottles.$bottleId";
import { Route as BottlesBottleIdAliasesRouteImport } from "./routes/bottles.$bottleId.aliases";
import { Route as BottlesBottleIdEditRouteImport } from "./routes/bottles.$bottleId.edit";
import { Route as BottlesBottleIdIndexRouteImport } from "./routes/bottles.$bottleId.index";
import { Route as BottlesBottleIdMergeRouteImport } from "./routes/bottles.$bottleId.merge";
import { Route as BottlesBottleIdPricesRouteImport } from "./routes/bottles.$bottleId.prices";
import { Route as BottlesBottleIdReleasesRouteImport } from "./routes/bottles.$bottleId.releases";
import { Route as BottlesBottleIdReleasesReleaseIdEditRouteImport } from "./routes/bottles.$bottleId.releases.$releaseId.edit";
import { Route as BottlesBottleIdSimilarRouteImport } from "./routes/bottles.$bottleId.similar";
import { Route as BottlesBottleIdTastingsRouteImport } from "./routes/bottles.$bottleId.tastings";
import { Route as BottlesIndexRouteImport } from "./routes/bottles.index";
import { Route as BottlesBottleIdAddReleaseRouteImport } from "./routes/bottles_.$bottleId.addRelease";
import { Route as BottlesBottleIdAddTastingRouteImport } from "./routes/bottles_.$bottleId.addTasting";
import { Route as BrandsIndexRouteImport } from "./routes/brands.index";
import { Route as DistillersIndexRouteImport } from "./routes/distillers.index";
import { Route as EntitiesEntityIdRouteImport } from "./routes/entities.$entityId";
import { Route as EntitiesEntityIdAliasesRouteImport } from "./routes/entities.$entityId.aliases";
import { Route as EntitiesEntityIdBottlesRouteImport } from "./routes/entities.$entityId.bottles";
import { Route as EntitiesEntityIdCodesRouteImport } from "./routes/entities.$entityId.codes";
import { Route as EntitiesEntityIdIndexRouteImport } from "./routes/entities.$entityId.index";
import { Route as EntitiesEntityIdTastingsRouteImport } from "./routes/entities.$entityId.tastings";
import { Route as EntitiesEntityIdEditRouteImport } from "./routes/entities_.$entityId.edit";
import { Route as EntitiesEntityIdMergeRouteImport } from "./routes/entities_.$entityId.merge";
import { Route as FavoritesRouteImport } from "./routes/favorites";
import { Route as FlightsFlightIdRouteImport } from "./routes/flights.$flightId";
import { Route as FlightsFlightIdEditRouteImport } from "./routes/flights.$flightId.edit";
import { Route as FlightsFlightIdOverlayRouteImport } from "./routes/flights.$flightId.overlay";
import { Route as FlightsIndexRouteImport } from "./routes/flights.index";
import { Route as FriendsRouteImport } from "./routes/friends";
import { Route as GlobalErrorRouteImport } from "./routes/global-error";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as LocationsRouteImport } from "./routes/locations";
import { Route as LocationsCountrySlugRouteImport } from "./routes/locations.$countrySlug";
import { Route as LocationsCountrySlugIndexRouteImport } from "./routes/locations.$countrySlug.index";
import { Route as LocationsCountrySlugRegionsRouteImport } from "./routes/locations.$countrySlug.regions";
import { Route as LocationsCountrySlugRegionsRegionSlugRouteImport } from "./routes/locations.$countrySlug.regions.$regionSlug";
import { Route as LocationsAllRegionsRouteImport } from "./routes/locations.all-regions";
import { Route as LoginRouteImport } from "./routes/login";
import { Route as NotFoundRouteImport } from "./routes/not-found";
import { Route as NotificationsRouteImport } from "./routes/notifications";
import { Route as NotificationsAllRouteImport } from "./routes/notifications.all";
import { Route as PasswordResetRouteImport } from "./routes/password-reset";
import { Route as RegisterRouteImport } from "./routes/register";
import { Route as SearchRouteImport } from "./routes/search";
import { Route as SettingsRouteImport } from "./routes/settings";
import { Route as TastingsTastingIdRouteImport } from "./routes/tastings.$tastingId";
import { Route as TastingsTastingIdEditRouteImport } from "./routes/tastings.$tastingId.edit";
import { Route as TastingsIndexRouteImport } from "./routes/tastings.index";
import { Route as UpdatesRouteImport } from "./routes/updates";
import { Route as UsersUsernameRouteImport } from "./routes/users.$username";
import { Route as UsersUsernameFavoritesRouteImport } from "./routes/users.$username.favorites";
import { Route as UsersUsernameIndexRouteImport } from "./routes/users.$username.index";
import { Route as VerifyRouteImport } from "./routes/verify";

// Create/Update Routes

const VerifyRoute = VerifyRouteImport.update({
  id: "/verify",
  path: "/verify",
  getParentRoute: () => rootRoute,
} as any);

const UpdatesRoute = UpdatesRouteImport.update({
  id: "/updates",
  path: "/updates",
  getParentRoute: () => rootRoute,
} as any);

const SettingsRoute = SettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const SearchRoute = SearchRouteImport.update({
  id: "/search",
  path: "/search",
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoute = RegisterRouteImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => rootRoute,
} as any);

const PasswordResetRoute = PasswordResetRouteImport.update({
  id: "/password-reset",
  path: "/password-reset",
  getParentRoute: () => rootRoute,
} as any);

const NotificationsRoute = NotificationsRouteImport.update({
  id: "/notifications",
  path: "/notifications",
  getParentRoute: () => rootRoute,
} as any);

const NotFoundRoute = NotFoundRouteImport.update({
  id: "/not-found",
  path: "/not-found",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const LocationsRoute = LocationsRouteImport.update({
  id: "/locations",
  path: "/locations",
  getParentRoute: () => rootRoute,
} as any);

const GlobalErrorRoute = GlobalErrorRouteImport.update({
  id: "/global-error",
  path: "/global-error",
  getParentRoute: () => rootRoute,
} as any);

const FriendsRoute = FriendsRouteImport.update({
  id: "/friends",
  path: "/friends",
  getParentRoute: () => rootRoute,
} as any);

const FavoritesRoute = FavoritesRouteImport.update({
  id: "/favorites",
  path: "/favorites",
  getParentRoute: () => rootRoute,
} as any);

const AdminRoute = AdminRouteImport.update({
  id: "/admin",
  path: "/admin",
  getParentRoute: () => rootRoute,
} as any);

const AddFlightRoute = AddFlightRouteImport.update({
  id: "/addFlight",
  path: "/addFlight",
  getParentRoute: () => rootRoute,
} as any);

const AddEntityRoute = AddEntityRouteImport.update({
  id: "/addEntity",
  path: "/addEntity",
  getParentRoute: () => rootRoute,
} as any);

const AddBottleRoute = AddBottleRouteImport.update({
  id: "/addBottle",
  path: "/addBottle",
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const TastingsIndexRoute = TastingsIndexRouteImport.update({
  id: "/tastings/",
  path: "/tastings/",
  getParentRoute: () => rootRoute,
} as any);

const FlightsIndexRoute = FlightsIndexRouteImport.update({
  id: "/flights/",
  path: "/flights/",
  getParentRoute: () => rootRoute,
} as any);

const DistillersIndexRoute = DistillersIndexRouteImport.update({
  id: "/distillers/",
  path: "/distillers/",
  getParentRoute: () => rootRoute,
} as any);

const BrandsIndexRoute = BrandsIndexRouteImport.update({
  id: "/brands/",
  path: "/brands/",
  getParentRoute: () => rootRoute,
} as any);

const BottlesIndexRoute = BottlesIndexRouteImport.update({
  id: "/bottles/",
  path: "/bottles/",
  getParentRoute: () => rootRoute,
} as any);

const BottlersIndexRoute = BottlersIndexRouteImport.update({
  id: "/bottlers/",
  path: "/bottlers/",
  getParentRoute: () => rootRoute,
} as any);

const AdminIndexRoute = AdminIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AdminRoute,
} as any);

const UsersUsernameRoute = UsersUsernameRouteImport.update({
  id: "/users/$username",
  path: "/users/$username",
  getParentRoute: () => rootRoute,
} as any);

const TastingsTastingIdRoute = TastingsTastingIdRouteImport.update({
  id: "/tastings/$tastingId",
  path: "/tastings/$tastingId",
  getParentRoute: () => rootRoute,
} as any);

const NotificationsAllRoute = NotificationsAllRouteImport.update({
  id: "/all",
  path: "/all",
  getParentRoute: () => NotificationsRoute,
} as any);

const LocationsAllRegionsRoute = LocationsAllRegionsRouteImport.update({
  id: "/all-regions",
  path: "/all-regions",
  getParentRoute: () => LocationsRoute,
} as any);

const LocationsCountrySlugRoute = LocationsCountrySlugRouteImport.update({
  id: "/$countrySlug",
  path: "/$countrySlug",
  getParentRoute: () => LocationsRoute,
} as any);

const FlightsFlightIdRoute = FlightsFlightIdRouteImport.update({
  id: "/flights/$flightId",
  path: "/flights/$flightId",
  getParentRoute: () => rootRoute,
} as any);

const EntitiesEntityIdRoute = EntitiesEntityIdRouteImport.update({
  id: "/entities/$entityId",
  path: "/entities/$entityId",
  getParentRoute: () => rootRoute,
} as any);

const BottlesBottleIdRoute = BottlesBottleIdRouteImport.update({
  id: "/bottles/$bottleId",
  path: "/bottles/$bottleId",
  getParentRoute: () => rootRoute,
} as any);

const BadgesBadgeIdRoute = BadgesBadgeIdRouteImport.update({
  id: "/badges/$badgeId",
  path: "/badges/$badgeId",
  getParentRoute: () => rootRoute,
} as any);

const AdminUsersRoute = AdminUsersRouteImport.update({
  id: "/users",
  path: "/users",
  getParentRoute: () => AdminRoute,
} as any);

const AdminTagsRoute = AdminTagsRouteImport.update({
  id: "/tags",
  path: "/tags",
  getParentRoute: () => AdminRoute,
} as any);

const AdminSitesRoute = AdminSitesRouteImport.update({
  id: "/sites",
  path: "/sites",
  getParentRoute: () => AdminRoute,
} as any);

const AdminQueueRoute = AdminQueueRouteImport.update({
  id: "/queue",
  path: "/queue",
  getParentRoute: () => AdminRoute,
} as any);

const AdminLocationsRoute = AdminLocationsRouteImport.update({
  id: "/locations",
  path: "/locations",
  getParentRoute: () => AdminRoute,
} as any);

const AdminEventsRoute = AdminEventsRouteImport.update({
  id: "/events",
  path: "/events",
  getParentRoute: () => AdminRoute,
} as any);

const AdminBadgesRoute = AdminBadgesRouteImport.update({
  id: "/badges",
  path: "/badges",
  getParentRoute: () => AdminRoute,
} as any);

const ActivityLocalRoute = ActivityLocalRouteImport.update({
  id: "/activity/local",
  path: "/activity/local",
  getParentRoute: () => rootRoute,
} as any);

const ActivityFriendsRoute = ActivityFriendsRouteImport.update({
  id: "/activity/friends",
  path: "/activity/friends",
  getParentRoute: () => rootRoute,
} as any);

const UsersUsernameIndexRoute = UsersUsernameIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => UsersUsernameRoute,
} as any);

const LocationsCountrySlugIndexRoute =
  LocationsCountrySlugIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => LocationsCountrySlugRoute,
  } as any);

const EntitiesEntityIdIndexRoute = EntitiesEntityIdIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => EntitiesEntityIdRoute,
} as any);

const BottlesBottleIdIndexRoute = BottlesBottleIdIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const UsersUsernameFavoritesRoute = UsersUsernameFavoritesRouteImport.update({
  id: "/favorites",
  path: "/favorites",
  getParentRoute: () => UsersUsernameRoute,
} as any);

const TastingsTastingIdEditRoute = TastingsTastingIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => TastingsTastingIdRoute,
} as any);

const LocationsCountrySlugRegionsRoute =
  LocationsCountrySlugRegionsRouteImport.update({
    id: "/regions",
    path: "/regions",
    getParentRoute: () => LocationsCountrySlugRoute,
  } as any);

const FlightsFlightIdOverlayRoute = FlightsFlightIdOverlayRouteImport.update({
  id: "/overlay",
  path: "/overlay",
  getParentRoute: () => FlightsFlightIdRoute,
} as any);

const FlightsFlightIdEditRoute = FlightsFlightIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => FlightsFlightIdRoute,
} as any);

const EntitiesEntityIdMergeRoute = EntitiesEntityIdMergeRouteImport.update({
  id: "/entities_/$entityId/merge",
  path: "/entities/$entityId/merge",
  getParentRoute: () => rootRoute,
} as any);

const EntitiesEntityIdEditRoute = EntitiesEntityIdEditRouteImport.update({
  id: "/entities_/$entityId/edit",
  path: "/entities/$entityId/edit",
  getParentRoute: () => rootRoute,
} as any);

const EntitiesEntityIdTastingsRoute =
  EntitiesEntityIdTastingsRouteImport.update({
    id: "/tastings",
    path: "/tastings",
    getParentRoute: () => EntitiesEntityIdRoute,
  } as any);

const EntitiesEntityIdCodesRoute = EntitiesEntityIdCodesRouteImport.update({
  id: "/codes",
  path: "/codes",
  getParentRoute: () => EntitiesEntityIdRoute,
} as any);

const EntitiesEntityIdBottlesRoute = EntitiesEntityIdBottlesRouteImport.update({
  id: "/bottles",
  path: "/bottles",
  getParentRoute: () => EntitiesEntityIdRoute,
} as any);

const EntitiesEntityIdAliasesRoute = EntitiesEntityIdAliasesRouteImport.update({
  id: "/aliases",
  path: "/aliases",
  getParentRoute: () => EntitiesEntityIdRoute,
} as any);

const BottlesBottleIdAddTastingRoute =
  BottlesBottleIdAddTastingRouteImport.update({
    id: "/bottles_/$bottleId/addTasting",
    path: "/bottles/$bottleId/addTasting",
    getParentRoute: () => rootRoute,
  } as any);

const BottlesBottleIdAddReleaseRoute =
  BottlesBottleIdAddReleaseRouteImport.update({
    id: "/bottles_/$bottleId/addRelease",
    path: "/bottles/$bottleId/addRelease",
    getParentRoute: () => rootRoute,
  } as any);

const BottlesBottleIdTastingsRoute = BottlesBottleIdTastingsRouteImport.update({
  id: "/tastings",
  path: "/tastings",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const BottlesBottleIdSimilarRoute = BottlesBottleIdSimilarRouteImport.update({
  id: "/similar",
  path: "/similar",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const BottlesBottleIdReleasesRoute = BottlesBottleIdReleasesRouteImport.update({
  id: "/releases",
  path: "/releases",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const BottlesBottleIdPricesRoute = BottlesBottleIdPricesRouteImport.update({
  id: "/prices",
  path: "/prices",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const BottlesBottleIdMergeRoute = BottlesBottleIdMergeRouteImport.update({
  id: "/merge",
  path: "/merge",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const BottlesBottleIdEditRoute = BottlesBottleIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const BottlesBottleIdAliasesRoute = BottlesBottleIdAliasesRouteImport.update({
  id: "/aliases",
  path: "/aliases",
  getParentRoute: () => BottlesBottleIdRoute,
} as any);

const AdminTagsAddRoute = AdminTagsAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => AdminTagsRoute,
} as any);

const AdminTagsTagIdRoute = AdminTagsTagIdRouteImport.update({
  id: "/$tagId",
  path: "/$tagId",
  getParentRoute: () => AdminTagsRoute,
} as any);

const AdminSitesAddRoute = AdminSitesAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => AdminSitesRoute,
} as any);

const AdminSitesSiteIdRoute = AdminSitesSiteIdRouteImport.update({
  id: "/$siteId",
  path: "/$siteId",
  getParentRoute: () => AdminSitesRoute,
} as any);

const AdminLocationsCountrySlugRoute =
  AdminLocationsCountrySlugRouteImport.update({
    id: "/$countrySlug",
    path: "/$countrySlug",
    getParentRoute: () => AdminLocationsRoute,
  } as any);

const AdminEventsAddRoute = AdminEventsAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => AdminEventsRoute,
} as any);

const AdminEventsEventIdRoute = AdminEventsEventIdRouteImport.update({
  id: "/$eventId",
  path: "/$eventId",
  getParentRoute: () => AdminEventsRoute,
} as any);

const AdminBadgesAddRoute = AdminBadgesAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => AdminBadgesRoute,
} as any);

const AdminBadgesBadgeIdRoute = AdminBadgesBadgeIdRouteImport.update({
  id: "/$badgeId",
  path: "/$badgeId",
  getParentRoute: () => AdminBadgesRoute,
} as any);

const AdminSitesSiteIdIndexRoute = AdminSitesSiteIdIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AdminSitesSiteIdRoute,
} as any);

const AdminLocationsCountrySlugIndexRoute =
  AdminLocationsCountrySlugIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => AdminLocationsCountrySlugRoute,
  } as any);

const LocationsCountrySlugRegionsRegionSlugRoute =
  LocationsCountrySlugRegionsRegionSlugRouteImport.update({
    id: "/$regionSlug",
    path: "/$regionSlug",
    getParentRoute: () => LocationsCountrySlugRegionsRoute,
  } as any);

const AdminTagsTagIdEditRoute = AdminTagsTagIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => AdminTagsTagIdRoute,
} as any);

const AdminSitesSiteIdReviewsRoute = AdminSitesSiteIdReviewsRouteImport.update({
  id: "/reviews",
  path: "/reviews",
  getParentRoute: () => AdminSitesSiteIdRoute,
} as any);

const AdminSitesSiteIdEditRoute = AdminSitesSiteIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => AdminSitesSiteIdRoute,
} as any);

const AdminLocationsCountrySlugEditRoute =
  AdminLocationsCountrySlugEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => AdminLocationsCountrySlugRoute,
  } as any);

const AdminEventsEventIdEditRoute = AdminEventsEventIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => AdminEventsEventIdRoute,
} as any);

const AdminBadgesBadgeIdEditRoute = AdminBadgesBadgeIdEditRouteImport.update({
  id: "/edit",
  path: "/edit",
  getParentRoute: () => AdminBadgesBadgeIdRoute,
} as any);

const BottlesBottleIdReleasesReleaseIdEditRoute =
  BottlesBottleIdReleasesReleaseIdEditRouteImport.update({
    id: "/$releaseId/edit",
    path: "/$releaseId/edit",
    getParentRoute: () => BottlesBottleIdReleasesRoute,
  } as any);

const AdminLocationsCountrySlugRegionsAddRoute =
  AdminLocationsCountrySlugRegionsAddRouteImport.update({
    id: "/regions/add",
    path: "/regions/add",
    getParentRoute: () => AdminLocationsCountrySlugRoute,
  } as any);

const AdminLocationsCountrySlugRegionsRegionSlugRoute =
  AdminLocationsCountrySlugRegionsRegionSlugRouteImport.update({
    id: "/regions/$regionSlug",
    path: "/regions/$regionSlug",
    getParentRoute: () => AdminLocationsCountrySlugRoute,
  } as any);

const AdminLocationsCountrySlugRegionsRegionSlugEditRoute =
  AdminLocationsCountrySlugRegionsRegionSlugEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => AdminLocationsCountrySlugRegionsRegionSlugRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/addBottle": {
      id: "/addBottle";
      path: "/addBottle";
      fullPath: "/addBottle";
      preLoaderRoute: typeof AddBottleRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/addEntity": {
      id: "/addEntity";
      path: "/addEntity";
      fullPath: "/addEntity";
      preLoaderRoute: typeof AddEntityRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/addFlight": {
      id: "/addFlight";
      path: "/addFlight";
      fullPath: "/addFlight";
      preLoaderRoute: typeof AddFlightRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/admin": {
      id: "/admin";
      path: "/admin";
      fullPath: "/admin";
      preLoaderRoute: typeof AdminRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/favorites": {
      id: "/favorites";
      path: "/favorites";
      fullPath: "/favorites";
      preLoaderRoute: typeof FavoritesRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/friends": {
      id: "/friends";
      path: "/friends";
      fullPath: "/friends";
      preLoaderRoute: typeof FriendsRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/global-error": {
      id: "/global-error";
      path: "/global-error";
      fullPath: "/global-error";
      preLoaderRoute: typeof GlobalErrorRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/locations": {
      id: "/locations";
      path: "/locations";
      fullPath: "/locations";
      preLoaderRoute: typeof LocationsRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/not-found": {
      id: "/not-found";
      path: "/not-found";
      fullPath: "/not-found";
      preLoaderRoute: typeof NotFoundRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/notifications": {
      id: "/notifications";
      path: "/notifications";
      fullPath: "/notifications";
      preLoaderRoute: typeof NotificationsRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/password-reset": {
      id: "/password-reset";
      path: "/password-reset";
      fullPath: "/password-reset";
      preLoaderRoute: typeof PasswordResetRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/search": {
      id: "/search";
      path: "/search";
      fullPath: "/search";
      preLoaderRoute: typeof SearchRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/updates": {
      id: "/updates";
      path: "/updates";
      fullPath: "/updates";
      preLoaderRoute: typeof UpdatesRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/verify": {
      id: "/verify";
      path: "/verify";
      fullPath: "/verify";
      preLoaderRoute: typeof VerifyRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/activity/friends": {
      id: "/activity/friends";
      path: "/activity/friends";
      fullPath: "/activity/friends";
      preLoaderRoute: typeof ActivityFriendsRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/activity/local": {
      id: "/activity/local";
      path: "/activity/local";
      fullPath: "/activity/local";
      preLoaderRoute: typeof ActivityLocalRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/admin/badges": {
      id: "/admin/badges";
      path: "/badges";
      fullPath: "/admin/badges";
      preLoaderRoute: typeof AdminBadgesRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/admin/events": {
      id: "/admin/events";
      path: "/events";
      fullPath: "/admin/events";
      preLoaderRoute: typeof AdminEventsRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/admin/locations": {
      id: "/admin/locations";
      path: "/locations";
      fullPath: "/admin/locations";
      preLoaderRoute: typeof AdminLocationsRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/admin/queue": {
      id: "/admin/queue";
      path: "/queue";
      fullPath: "/admin/queue";
      preLoaderRoute: typeof AdminQueueRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/admin/sites": {
      id: "/admin/sites";
      path: "/sites";
      fullPath: "/admin/sites";
      preLoaderRoute: typeof AdminSitesRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/admin/tags": {
      id: "/admin/tags";
      path: "/tags";
      fullPath: "/admin/tags";
      preLoaderRoute: typeof AdminTagsRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/admin/users": {
      id: "/admin/users";
      path: "/users";
      fullPath: "/admin/users";
      preLoaderRoute: typeof AdminUsersRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/badges/$badgeId": {
      id: "/badges/$badgeId";
      path: "/badges/$badgeId";
      fullPath: "/badges/$badgeId";
      preLoaderRoute: typeof BadgesBadgeIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/bottles/$bottleId": {
      id: "/bottles/$bottleId";
      path: "/bottles/$bottleId";
      fullPath: "/bottles/$bottleId";
      preLoaderRoute: typeof BottlesBottleIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/entities/$entityId": {
      id: "/entities/$entityId";
      path: "/entities/$entityId";
      fullPath: "/entities/$entityId";
      preLoaderRoute: typeof EntitiesEntityIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/flights/$flightId": {
      id: "/flights/$flightId";
      path: "/flights/$flightId";
      fullPath: "/flights/$flightId";
      preLoaderRoute: typeof FlightsFlightIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/locations/$countrySlug": {
      id: "/locations/$countrySlug";
      path: "/$countrySlug";
      fullPath: "/locations/$countrySlug";
      preLoaderRoute: typeof LocationsCountrySlugRouteImport;
      parentRoute: typeof LocationsRouteImport;
    };
    "/locations/all-regions": {
      id: "/locations/all-regions";
      path: "/all-regions";
      fullPath: "/locations/all-regions";
      preLoaderRoute: typeof LocationsAllRegionsRouteImport;
      parentRoute: typeof LocationsRouteImport;
    };
    "/notifications/all": {
      id: "/notifications/all";
      path: "/all";
      fullPath: "/notifications/all";
      preLoaderRoute: typeof NotificationsAllRouteImport;
      parentRoute: typeof NotificationsRouteImport;
    };
    "/tastings/$tastingId": {
      id: "/tastings/$tastingId";
      path: "/tastings/$tastingId";
      fullPath: "/tastings/$tastingId";
      preLoaderRoute: typeof TastingsTastingIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/users/$username": {
      id: "/users/$username";
      path: "/users/$username";
      fullPath: "/users/$username";
      preLoaderRoute: typeof UsersUsernameRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/admin/": {
      id: "/admin/";
      path: "/";
      fullPath: "/admin/";
      preLoaderRoute: typeof AdminIndexRouteImport;
      parentRoute: typeof AdminRouteImport;
    };
    "/bottlers/": {
      id: "/bottlers/";
      path: "/bottlers";
      fullPath: "/bottlers";
      preLoaderRoute: typeof BottlersIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/bottles/": {
      id: "/bottles/";
      path: "/bottles";
      fullPath: "/bottles";
      preLoaderRoute: typeof BottlesIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/brands/": {
      id: "/brands/";
      path: "/brands";
      fullPath: "/brands";
      preLoaderRoute: typeof BrandsIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/distillers/": {
      id: "/distillers/";
      path: "/distillers";
      fullPath: "/distillers";
      preLoaderRoute: typeof DistillersIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/flights/": {
      id: "/flights/";
      path: "/flights";
      fullPath: "/flights";
      preLoaderRoute: typeof FlightsIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/tastings/": {
      id: "/tastings/";
      path: "/tastings";
      fullPath: "/tastings";
      preLoaderRoute: typeof TastingsIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/admin/badges/$badgeId": {
      id: "/admin/badges/$badgeId";
      path: "/$badgeId";
      fullPath: "/admin/badges/$badgeId";
      preLoaderRoute: typeof AdminBadgesBadgeIdRouteImport;
      parentRoute: typeof AdminBadgesRouteImport;
    };
    "/admin/badges/add": {
      id: "/admin/badges/add";
      path: "/add";
      fullPath: "/admin/badges/add";
      preLoaderRoute: typeof AdminBadgesAddRouteImport;
      parentRoute: typeof AdminBadgesRouteImport;
    };
    "/admin/events/$eventId": {
      id: "/admin/events/$eventId";
      path: "/$eventId";
      fullPath: "/admin/events/$eventId";
      preLoaderRoute: typeof AdminEventsEventIdRouteImport;
      parentRoute: typeof AdminEventsRouteImport;
    };
    "/admin/events/add": {
      id: "/admin/events/add";
      path: "/add";
      fullPath: "/admin/events/add";
      preLoaderRoute: typeof AdminEventsAddRouteImport;
      parentRoute: typeof AdminEventsRouteImport;
    };
    "/admin/locations/$countrySlug": {
      id: "/admin/locations/$countrySlug";
      path: "/$countrySlug";
      fullPath: "/admin/locations/$countrySlug";
      preLoaderRoute: typeof AdminLocationsCountrySlugRouteImport;
      parentRoute: typeof AdminLocationsRouteImport;
    };
    "/admin/sites/$siteId": {
      id: "/admin/sites/$siteId";
      path: "/$siteId";
      fullPath: "/admin/sites/$siteId";
      preLoaderRoute: typeof AdminSitesSiteIdRouteImport;
      parentRoute: typeof AdminSitesRouteImport;
    };
    "/admin/sites/add": {
      id: "/admin/sites/add";
      path: "/add";
      fullPath: "/admin/sites/add";
      preLoaderRoute: typeof AdminSitesAddRouteImport;
      parentRoute: typeof AdminSitesRouteImport;
    };
    "/admin/tags/$tagId": {
      id: "/admin/tags/$tagId";
      path: "/$tagId";
      fullPath: "/admin/tags/$tagId";
      preLoaderRoute: typeof AdminTagsTagIdRouteImport;
      parentRoute: typeof AdminTagsRouteImport;
    };
    "/admin/tags/add": {
      id: "/admin/tags/add";
      path: "/add";
      fullPath: "/admin/tags/add";
      preLoaderRoute: typeof AdminTagsAddRouteImport;
      parentRoute: typeof AdminTagsRouteImport;
    };
    "/bottles/$bottleId/aliases": {
      id: "/bottles/$bottleId/aliases";
      path: "/aliases";
      fullPath: "/bottles/$bottleId/aliases";
      preLoaderRoute: typeof BottlesBottleIdAliasesRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/bottles/$bottleId/edit": {
      id: "/bottles/$bottleId/edit";
      path: "/edit";
      fullPath: "/bottles/$bottleId/edit";
      preLoaderRoute: typeof BottlesBottleIdEditRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/bottles/$bottleId/merge": {
      id: "/bottles/$bottleId/merge";
      path: "/merge";
      fullPath: "/bottles/$bottleId/merge";
      preLoaderRoute: typeof BottlesBottleIdMergeRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/bottles/$bottleId/prices": {
      id: "/bottles/$bottleId/prices";
      path: "/prices";
      fullPath: "/bottles/$bottleId/prices";
      preLoaderRoute: typeof BottlesBottleIdPricesRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/bottles/$bottleId/releases": {
      id: "/bottles/$bottleId/releases";
      path: "/releases";
      fullPath: "/bottles/$bottleId/releases";
      preLoaderRoute: typeof BottlesBottleIdReleasesRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/bottles/$bottleId/similar": {
      id: "/bottles/$bottleId/similar";
      path: "/similar";
      fullPath: "/bottles/$bottleId/similar";
      preLoaderRoute: typeof BottlesBottleIdSimilarRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/bottles/$bottleId/tastings": {
      id: "/bottles/$bottleId/tastings";
      path: "/tastings";
      fullPath: "/bottles/$bottleId/tastings";
      preLoaderRoute: typeof BottlesBottleIdTastingsRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/bottles_/$bottleId/addRelease": {
      id: "/bottles_/$bottleId/addRelease";
      path: "/bottles/$bottleId/addRelease";
      fullPath: "/bottles/$bottleId/addRelease";
      preLoaderRoute: typeof BottlesBottleIdAddReleaseRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/bottles_/$bottleId/addTasting": {
      id: "/bottles_/$bottleId/addTasting";
      path: "/bottles/$bottleId/addTasting";
      fullPath: "/bottles/$bottleId/addTasting";
      preLoaderRoute: typeof BottlesBottleIdAddTastingRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/entities/$entityId/aliases": {
      id: "/entities/$entityId/aliases";
      path: "/aliases";
      fullPath: "/entities/$entityId/aliases";
      preLoaderRoute: typeof EntitiesEntityIdAliasesRouteImport;
      parentRoute: typeof EntitiesEntityIdRouteImport;
    };
    "/entities/$entityId/bottles": {
      id: "/entities/$entityId/bottles";
      path: "/bottles";
      fullPath: "/entities/$entityId/bottles";
      preLoaderRoute: typeof EntitiesEntityIdBottlesRouteImport;
      parentRoute: typeof EntitiesEntityIdRouteImport;
    };
    "/entities/$entityId/codes": {
      id: "/entities/$entityId/codes";
      path: "/codes";
      fullPath: "/entities/$entityId/codes";
      preLoaderRoute: typeof EntitiesEntityIdCodesRouteImport;
      parentRoute: typeof EntitiesEntityIdRouteImport;
    };
    "/entities/$entityId/tastings": {
      id: "/entities/$entityId/tastings";
      path: "/tastings";
      fullPath: "/entities/$entityId/tastings";
      preLoaderRoute: typeof EntitiesEntityIdTastingsRouteImport;
      parentRoute: typeof EntitiesEntityIdRouteImport;
    };
    "/entities_/$entityId/edit": {
      id: "/entities_/$entityId/edit";
      path: "/entities/$entityId/edit";
      fullPath: "/entities/$entityId/edit";
      preLoaderRoute: typeof EntitiesEntityIdEditRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/entities_/$entityId/merge": {
      id: "/entities_/$entityId/merge";
      path: "/entities/$entityId/merge";
      fullPath: "/entities/$entityId/merge";
      preLoaderRoute: typeof EntitiesEntityIdMergeRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/flights/$flightId/edit": {
      id: "/flights/$flightId/edit";
      path: "/edit";
      fullPath: "/flights/$flightId/edit";
      preLoaderRoute: typeof FlightsFlightIdEditRouteImport;
      parentRoute: typeof FlightsFlightIdRouteImport;
    };
    "/flights/$flightId/overlay": {
      id: "/flights/$flightId/overlay";
      path: "/overlay";
      fullPath: "/flights/$flightId/overlay";
      preLoaderRoute: typeof FlightsFlightIdOverlayRouteImport;
      parentRoute: typeof FlightsFlightIdRouteImport;
    };
    "/locations/$countrySlug/regions": {
      id: "/locations/$countrySlug/regions";
      path: "/regions";
      fullPath: "/locations/$countrySlug/regions";
      preLoaderRoute: typeof LocationsCountrySlugRegionsRouteImport;
      parentRoute: typeof LocationsCountrySlugRouteImport;
    };
    "/tastings/$tastingId/edit": {
      id: "/tastings/$tastingId/edit";
      path: "/edit";
      fullPath: "/tastings/$tastingId/edit";
      preLoaderRoute: typeof TastingsTastingIdEditRouteImport;
      parentRoute: typeof TastingsTastingIdRouteImport;
    };
    "/users/$username/favorites": {
      id: "/users/$username/favorites";
      path: "/favorites";
      fullPath: "/users/$username/favorites";
      preLoaderRoute: typeof UsersUsernameFavoritesRouteImport;
      parentRoute: typeof UsersUsernameRouteImport;
    };
    "/bottles/$bottleId/": {
      id: "/bottles/$bottleId/";
      path: "/";
      fullPath: "/bottles/$bottleId/";
      preLoaderRoute: typeof BottlesBottleIdIndexRouteImport;
      parentRoute: typeof BottlesBottleIdRouteImport;
    };
    "/entities/$entityId/": {
      id: "/entities/$entityId/";
      path: "/";
      fullPath: "/entities/$entityId/";
      preLoaderRoute: typeof EntitiesEntityIdIndexRouteImport;
      parentRoute: typeof EntitiesEntityIdRouteImport;
    };
    "/locations/$countrySlug/": {
      id: "/locations/$countrySlug/";
      path: "/";
      fullPath: "/locations/$countrySlug/";
      preLoaderRoute: typeof LocationsCountrySlugIndexRouteImport;
      parentRoute: typeof LocationsCountrySlugRouteImport;
    };
    "/users/$username/": {
      id: "/users/$username/";
      path: "/";
      fullPath: "/users/$username/";
      preLoaderRoute: typeof UsersUsernameIndexRouteImport;
      parentRoute: typeof UsersUsernameRouteImport;
    };
    "/admin/badges/$badgeId/edit": {
      id: "/admin/badges/$badgeId/edit";
      path: "/edit";
      fullPath: "/admin/badges/$badgeId/edit";
      preLoaderRoute: typeof AdminBadgesBadgeIdEditRouteImport;
      parentRoute: typeof AdminBadgesBadgeIdRouteImport;
    };
    "/admin/events/$eventId/edit": {
      id: "/admin/events/$eventId/edit";
      path: "/edit";
      fullPath: "/admin/events/$eventId/edit";
      preLoaderRoute: typeof AdminEventsEventIdEditRouteImport;
      parentRoute: typeof AdminEventsEventIdRouteImport;
    };
    "/admin/locations/$countrySlug/edit": {
      id: "/admin/locations/$countrySlug/edit";
      path: "/edit";
      fullPath: "/admin/locations/$countrySlug/edit";
      preLoaderRoute: typeof AdminLocationsCountrySlugEditRouteImport;
      parentRoute: typeof AdminLocationsCountrySlugRouteImport;
    };
    "/admin/sites/$siteId/edit": {
      id: "/admin/sites/$siteId/edit";
      path: "/edit";
      fullPath: "/admin/sites/$siteId/edit";
      preLoaderRoute: typeof AdminSitesSiteIdEditRouteImport;
      parentRoute: typeof AdminSitesSiteIdRouteImport;
    };
    "/admin/sites/$siteId/reviews": {
      id: "/admin/sites/$siteId/reviews";
      path: "/reviews";
      fullPath: "/admin/sites/$siteId/reviews";
      preLoaderRoute: typeof AdminSitesSiteIdReviewsRouteImport;
      parentRoute: typeof AdminSitesSiteIdRouteImport;
    };
    "/admin/tags/$tagId/edit": {
      id: "/admin/tags/$tagId/edit";
      path: "/edit";
      fullPath: "/admin/tags/$tagId/edit";
      preLoaderRoute: typeof AdminTagsTagIdEditRouteImport;
      parentRoute: typeof AdminTagsTagIdRouteImport;
    };
    "/locations/$countrySlug/regions/$regionSlug": {
      id: "/locations/$countrySlug/regions/$regionSlug";
      path: "/$regionSlug";
      fullPath: "/locations/$countrySlug/regions/$regionSlug";
      preLoaderRoute: typeof LocationsCountrySlugRegionsRegionSlugRouteImport;
      parentRoute: typeof LocationsCountrySlugRegionsRouteImport;
    };
    "/admin/locations/$countrySlug/": {
      id: "/admin/locations/$countrySlug/";
      path: "/";
      fullPath: "/admin/locations/$countrySlug/";
      preLoaderRoute: typeof AdminLocationsCountrySlugIndexRouteImport;
      parentRoute: typeof AdminLocationsCountrySlugRouteImport;
    };
    "/admin/sites/$siteId/": {
      id: "/admin/sites/$siteId/";
      path: "/";
      fullPath: "/admin/sites/$siteId/";
      preLoaderRoute: typeof AdminSitesSiteIdIndexRouteImport;
      parentRoute: typeof AdminSitesSiteIdRouteImport;
    };
    "/admin/locations/$countrySlug/regions/$regionSlug": {
      id: "/admin/locations/$countrySlug/regions/$regionSlug";
      path: "/regions/$regionSlug";
      fullPath: "/admin/locations/$countrySlug/regions/$regionSlug";
      preLoaderRoute: typeof AdminLocationsCountrySlugRegionsRegionSlugRouteImport;
      parentRoute: typeof AdminLocationsCountrySlugRouteImport;
    };
    "/admin/locations/$countrySlug/regions/add": {
      id: "/admin/locations/$countrySlug/regions/add";
      path: "/regions/add";
      fullPath: "/admin/locations/$countrySlug/regions/add";
      preLoaderRoute: typeof AdminLocationsCountrySlugRegionsAddRouteImport;
      parentRoute: typeof AdminLocationsCountrySlugRouteImport;
    };
    "/bottles/$bottleId/releases/$releaseId/edit": {
      id: "/bottles/$bottleId/releases/$releaseId/edit";
      path: "/$releaseId/edit";
      fullPath: "/bottles/$bottleId/releases/$releaseId/edit";
      preLoaderRoute: typeof BottlesBottleIdReleasesReleaseIdEditRouteImport;
      parentRoute: typeof BottlesBottleIdReleasesRouteImport;
    };
    "/admin/locations/$countrySlug/regions/$regionSlug/edit": {
      id: "/admin/locations/$countrySlug/regions/$regionSlug/edit";
      path: "/edit";
      fullPath: "/admin/locations/$countrySlug/regions/$regionSlug/edit";
      preLoaderRoute: typeof AdminLocationsCountrySlugRegionsRegionSlugEditRouteImport;
      parentRoute: typeof AdminLocationsCountrySlugRegionsRegionSlugRouteImport;
    };
  }
}

// Create and export the route tree

interface AdminBadgesBadgeIdRouteChildren {
  AdminBadgesBadgeIdEditRoute: typeof AdminBadgesBadgeIdEditRoute;
}

const AdminBadgesBadgeIdRouteChildren: AdminBadgesBadgeIdRouteChildren = {
  AdminBadgesBadgeIdEditRoute: AdminBadgesBadgeIdEditRoute,
};

const AdminBadgesBadgeIdRouteWithChildren =
  AdminBadgesBadgeIdRoute._addFileChildren(AdminBadgesBadgeIdRouteChildren);

interface AdminBadgesRouteChildren {
  AdminBadgesBadgeIdRoute: typeof AdminBadgesBadgeIdRouteWithChildren;
  AdminBadgesAddRoute: typeof AdminBadgesAddRoute;
}

const AdminBadgesRouteChildren: AdminBadgesRouteChildren = {
  AdminBadgesBadgeIdRoute: AdminBadgesBadgeIdRouteWithChildren,
  AdminBadgesAddRoute: AdminBadgesAddRoute,
};

const AdminBadgesRouteWithChildren = AdminBadgesRoute._addFileChildren(
  AdminBadgesRouteChildren
);

interface AdminEventsEventIdRouteChildren {
  AdminEventsEventIdEditRoute: typeof AdminEventsEventIdEditRoute;
}

const AdminEventsEventIdRouteChildren: AdminEventsEventIdRouteChildren = {
  AdminEventsEventIdEditRoute: AdminEventsEventIdEditRoute,
};

const AdminEventsEventIdRouteWithChildren =
  AdminEventsEventIdRoute._addFileChildren(AdminEventsEventIdRouteChildren);

interface AdminEventsRouteChildren {
  AdminEventsEventIdRoute: typeof AdminEventsEventIdRouteWithChildren;
  AdminEventsAddRoute: typeof AdminEventsAddRoute;
}

const AdminEventsRouteChildren: AdminEventsRouteChildren = {
  AdminEventsEventIdRoute: AdminEventsEventIdRouteWithChildren,
  AdminEventsAddRoute: AdminEventsAddRoute,
};

const AdminEventsRouteWithChildren = AdminEventsRoute._addFileChildren(
  AdminEventsRouteChildren
);

interface AdminLocationsCountrySlugRegionsRegionSlugRouteChildren {
  AdminLocationsCountrySlugRegionsRegionSlugEditRoute: typeof AdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

const AdminLocationsCountrySlugRegionsRegionSlugRouteChildren: AdminLocationsCountrySlugRegionsRegionSlugRouteChildren =
  {
    AdminLocationsCountrySlugRegionsRegionSlugEditRoute:
      AdminLocationsCountrySlugRegionsRegionSlugEditRoute,
  };

const AdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren =
  AdminLocationsCountrySlugRegionsRegionSlugRoute._addFileChildren(
    AdminLocationsCountrySlugRegionsRegionSlugRouteChildren
  );

interface AdminLocationsCountrySlugRouteChildren {
  AdminLocationsCountrySlugEditRoute: typeof AdminLocationsCountrySlugEditRoute;
  AdminLocationsCountrySlugIndexRoute: typeof AdminLocationsCountrySlugIndexRoute;
  AdminLocationsCountrySlugRegionsRegionSlugRoute: typeof AdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  AdminLocationsCountrySlugRegionsAddRoute: typeof AdminLocationsCountrySlugRegionsAddRoute;
}

const AdminLocationsCountrySlugRouteChildren: AdminLocationsCountrySlugRouteChildren =
  {
    AdminLocationsCountrySlugEditRoute: AdminLocationsCountrySlugEditRoute,
    AdminLocationsCountrySlugIndexRoute: AdminLocationsCountrySlugIndexRoute,
    AdminLocationsCountrySlugRegionsRegionSlugRoute:
      AdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren,
    AdminLocationsCountrySlugRegionsAddRoute:
      AdminLocationsCountrySlugRegionsAddRoute,
  };

const AdminLocationsCountrySlugRouteWithChildren =
  AdminLocationsCountrySlugRoute._addFileChildren(
    AdminLocationsCountrySlugRouteChildren
  );

interface AdminLocationsRouteChildren {
  AdminLocationsCountrySlugRoute: typeof AdminLocationsCountrySlugRouteWithChildren;
}

const AdminLocationsRouteChildren: AdminLocationsRouteChildren = {
  AdminLocationsCountrySlugRoute: AdminLocationsCountrySlugRouteWithChildren,
};

const AdminLocationsRouteWithChildren = AdminLocationsRoute._addFileChildren(
  AdminLocationsRouteChildren
);

interface AdminSitesSiteIdRouteChildren {
  AdminSitesSiteIdEditRoute: typeof AdminSitesSiteIdEditRoute;
  AdminSitesSiteIdReviewsRoute: typeof AdminSitesSiteIdReviewsRoute;
  AdminSitesSiteIdIndexRoute: typeof AdminSitesSiteIdIndexRoute;
}

const AdminSitesSiteIdRouteChildren: AdminSitesSiteIdRouteChildren = {
  AdminSitesSiteIdEditRoute: AdminSitesSiteIdEditRoute,
  AdminSitesSiteIdReviewsRoute: AdminSitesSiteIdReviewsRoute,
  AdminSitesSiteIdIndexRoute: AdminSitesSiteIdIndexRoute,
};

const AdminSitesSiteIdRouteWithChildren =
  AdminSitesSiteIdRoute._addFileChildren(AdminSitesSiteIdRouteChildren);

interface AdminSitesRouteChildren {
  AdminSitesSiteIdRoute: typeof AdminSitesSiteIdRouteWithChildren;
  AdminSitesAddRoute: typeof AdminSitesAddRoute;
}

const AdminSitesRouteChildren: AdminSitesRouteChildren = {
  AdminSitesSiteIdRoute: AdminSitesSiteIdRouteWithChildren,
  AdminSitesAddRoute: AdminSitesAddRoute,
};

const AdminSitesRouteWithChildren = AdminSitesRoute._addFileChildren(
  AdminSitesRouteChildren
);

interface AdminTagsTagIdRouteChildren {
  AdminTagsTagIdEditRoute: typeof AdminTagsTagIdEditRoute;
}

const AdminTagsTagIdRouteChildren: AdminTagsTagIdRouteChildren = {
  AdminTagsTagIdEditRoute: AdminTagsTagIdEditRoute,
};

const AdminTagsTagIdRouteWithChildren = AdminTagsTagIdRoute._addFileChildren(
  AdminTagsTagIdRouteChildren
);

interface AdminTagsRouteChildren {
  AdminTagsTagIdRoute: typeof AdminTagsTagIdRouteWithChildren;
  AdminTagsAddRoute: typeof AdminTagsAddRoute;
}

const AdminTagsRouteChildren: AdminTagsRouteChildren = {
  AdminTagsTagIdRoute: AdminTagsTagIdRouteWithChildren,
  AdminTagsAddRoute: AdminTagsAddRoute,
};

const AdminTagsRouteWithChildren = AdminTagsRoute._addFileChildren(
  AdminTagsRouteChildren
);

interface AdminRouteChildren {
  AdminBadgesRoute: typeof AdminBadgesRouteWithChildren;
  AdminEventsRoute: typeof AdminEventsRouteWithChildren;
  AdminLocationsRoute: typeof AdminLocationsRouteWithChildren;
  AdminQueueRoute: typeof AdminQueueRoute;
  AdminSitesRoute: typeof AdminSitesRouteWithChildren;
  AdminTagsRoute: typeof AdminTagsRouteWithChildren;
  AdminUsersRoute: typeof AdminUsersRoute;
  AdminIndexRoute: typeof AdminIndexRoute;
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminBadgesRoute: AdminBadgesRouteWithChildren,
  AdminEventsRoute: AdminEventsRouteWithChildren,
  AdminLocationsRoute: AdminLocationsRouteWithChildren,
  AdminQueueRoute: AdminQueueRoute,
  AdminSitesRoute: AdminSitesRouteWithChildren,
  AdminTagsRoute: AdminTagsRouteWithChildren,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
};

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren);

interface LocationsCountrySlugRegionsRouteChildren {
  LocationsCountrySlugRegionsRegionSlugRoute: typeof LocationsCountrySlugRegionsRegionSlugRoute;
}

const LocationsCountrySlugRegionsRouteChildren: LocationsCountrySlugRegionsRouteChildren =
  {
    LocationsCountrySlugRegionsRegionSlugRoute:
      LocationsCountrySlugRegionsRegionSlugRoute,
  };

const LocationsCountrySlugRegionsRouteWithChildren =
  LocationsCountrySlugRegionsRoute._addFileChildren(
    LocationsCountrySlugRegionsRouteChildren
  );

interface LocationsCountrySlugRouteChildren {
  LocationsCountrySlugRegionsRoute: typeof LocationsCountrySlugRegionsRouteWithChildren;
  LocationsCountrySlugIndexRoute: typeof LocationsCountrySlugIndexRoute;
}

const LocationsCountrySlugRouteChildren: LocationsCountrySlugRouteChildren = {
  LocationsCountrySlugRegionsRoute:
    LocationsCountrySlugRegionsRouteWithChildren,
  LocationsCountrySlugIndexRoute: LocationsCountrySlugIndexRoute,
};

const LocationsCountrySlugRouteWithChildren =
  LocationsCountrySlugRoute._addFileChildren(LocationsCountrySlugRouteChildren);

interface LocationsRouteChildren {
  LocationsCountrySlugRoute: typeof LocationsCountrySlugRouteWithChildren;
  LocationsAllRegionsRoute: typeof LocationsAllRegionsRoute;
}

const LocationsRouteChildren: LocationsRouteChildren = {
  LocationsCountrySlugRoute: LocationsCountrySlugRouteWithChildren,
  LocationsAllRegionsRoute: LocationsAllRegionsRoute,
};

const LocationsRouteWithChildren = LocationsRoute._addFileChildren(
  LocationsRouteChildren
);

interface NotificationsRouteChildren {
  NotificationsAllRoute: typeof NotificationsAllRoute;
}

const NotificationsRouteChildren: NotificationsRouteChildren = {
  NotificationsAllRoute: NotificationsAllRoute,
};

const NotificationsRouteWithChildren = NotificationsRoute._addFileChildren(
  NotificationsRouteChildren
);

interface BottlesBottleIdReleasesRouteChildren {
  BottlesBottleIdReleasesReleaseIdEditRoute: typeof BottlesBottleIdReleasesReleaseIdEditRoute;
}

const BottlesBottleIdReleasesRouteChildren: BottlesBottleIdReleasesRouteChildren =
  {
    BottlesBottleIdReleasesReleaseIdEditRoute:
      BottlesBottleIdReleasesReleaseIdEditRoute,
  };

const BottlesBottleIdReleasesRouteWithChildren =
  BottlesBottleIdReleasesRoute._addFileChildren(
    BottlesBottleIdReleasesRouteChildren
  );

interface BottlesBottleIdRouteChildren {
  BottlesBottleIdAliasesRoute: typeof BottlesBottleIdAliasesRoute;
  BottlesBottleIdEditRoute: typeof BottlesBottleIdEditRoute;
  BottlesBottleIdMergeRoute: typeof BottlesBottleIdMergeRoute;
  BottlesBottleIdPricesRoute: typeof BottlesBottleIdPricesRoute;
  BottlesBottleIdReleasesRoute: typeof BottlesBottleIdReleasesRouteWithChildren;
  BottlesBottleIdSimilarRoute: typeof BottlesBottleIdSimilarRoute;
  BottlesBottleIdTastingsRoute: typeof BottlesBottleIdTastingsRoute;
  BottlesBottleIdIndexRoute: typeof BottlesBottleIdIndexRoute;
}

const BottlesBottleIdRouteChildren: BottlesBottleIdRouteChildren = {
  BottlesBottleIdAliasesRoute: BottlesBottleIdAliasesRoute,
  BottlesBottleIdEditRoute: BottlesBottleIdEditRoute,
  BottlesBottleIdMergeRoute: BottlesBottleIdMergeRoute,
  BottlesBottleIdPricesRoute: BottlesBottleIdPricesRoute,
  BottlesBottleIdReleasesRoute: BottlesBottleIdReleasesRouteWithChildren,
  BottlesBottleIdSimilarRoute: BottlesBottleIdSimilarRoute,
  BottlesBottleIdTastingsRoute: BottlesBottleIdTastingsRoute,
  BottlesBottleIdIndexRoute: BottlesBottleIdIndexRoute,
};

const BottlesBottleIdRouteWithChildren = BottlesBottleIdRoute._addFileChildren(
  BottlesBottleIdRouteChildren
);

interface EntitiesEntityIdRouteChildren {
  EntitiesEntityIdAliasesRoute: typeof EntitiesEntityIdAliasesRoute;
  EntitiesEntityIdBottlesRoute: typeof EntitiesEntityIdBottlesRoute;
  EntitiesEntityIdCodesRoute: typeof EntitiesEntityIdCodesRoute;
  EntitiesEntityIdTastingsRoute: typeof EntitiesEntityIdTastingsRoute;
  EntitiesEntityIdIndexRoute: typeof EntitiesEntityIdIndexRoute;
}

const EntitiesEntityIdRouteChildren: EntitiesEntityIdRouteChildren = {
  EntitiesEntityIdAliasesRoute: EntitiesEntityIdAliasesRoute,
  EntitiesEntityIdBottlesRoute: EntitiesEntityIdBottlesRoute,
  EntitiesEntityIdCodesRoute: EntitiesEntityIdCodesRoute,
  EntitiesEntityIdTastingsRoute: EntitiesEntityIdTastingsRoute,
  EntitiesEntityIdIndexRoute: EntitiesEntityIdIndexRoute,
};

const EntitiesEntityIdRouteWithChildren =
  EntitiesEntityIdRoute._addFileChildren(EntitiesEntityIdRouteChildren);

interface FlightsFlightIdRouteChildren {
  FlightsFlightIdEditRoute: typeof FlightsFlightIdEditRoute;
  FlightsFlightIdOverlayRoute: typeof FlightsFlightIdOverlayRoute;
}

const FlightsFlightIdRouteChildren: FlightsFlightIdRouteChildren = {
  FlightsFlightIdEditRoute: FlightsFlightIdEditRoute,
  FlightsFlightIdOverlayRoute: FlightsFlightIdOverlayRoute,
};

const FlightsFlightIdRouteWithChildren = FlightsFlightIdRoute._addFileChildren(
  FlightsFlightIdRouteChildren
);

interface TastingsTastingIdRouteChildren {
  TastingsTastingIdEditRoute: typeof TastingsTastingIdEditRoute;
}

const TastingsTastingIdRouteChildren: TastingsTastingIdRouteChildren = {
  TastingsTastingIdEditRoute: TastingsTastingIdEditRoute,
};

const TastingsTastingIdRouteWithChildren =
  TastingsTastingIdRoute._addFileChildren(TastingsTastingIdRouteChildren);

interface UsersUsernameRouteChildren {
  UsersUsernameFavoritesRoute: typeof UsersUsernameFavoritesRoute;
  UsersUsernameIndexRoute: typeof UsersUsernameIndexRoute;
}

const UsersUsernameRouteChildren: UsersUsernameRouteChildren = {
  UsersUsernameFavoritesRoute: UsersUsernameFavoritesRoute,
  UsersUsernameIndexRoute: UsersUsernameIndexRoute,
};

const UsersUsernameRouteWithChildren = UsersUsernameRoute._addFileChildren(
  UsersUsernameRouteChildren
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/addBottle": typeof AddBottleRoute;
  "/addEntity": typeof AddEntityRoute;
  "/addFlight": typeof AddFlightRoute;
  "/admin": typeof AdminRouteWithChildren;
  "/favorites": typeof FavoritesRoute;
  "/friends": typeof FriendsRoute;
  "/global-error": typeof GlobalErrorRoute;
  "/locations": typeof LocationsRouteWithChildren;
  "/login": typeof LoginRoute;
  "/not-found": typeof NotFoundRoute;
  "/notifications": typeof NotificationsRouteWithChildren;
  "/password-reset": typeof PasswordResetRoute;
  "/register": typeof RegisterRoute;
  "/search": typeof SearchRoute;
  "/settings": typeof SettingsRoute;
  "/updates": typeof UpdatesRoute;
  "/verify": typeof VerifyRoute;
  "/activity/friends": typeof ActivityFriendsRoute;
  "/activity/local": typeof ActivityLocalRoute;
  "/admin/badges": typeof AdminBadgesRouteWithChildren;
  "/admin/events": typeof AdminEventsRouteWithChildren;
  "/admin/locations": typeof AdminLocationsRouteWithChildren;
  "/admin/queue": typeof AdminQueueRoute;
  "/admin/sites": typeof AdminSitesRouteWithChildren;
  "/admin/tags": typeof AdminTagsRouteWithChildren;
  "/admin/users": typeof AdminUsersRoute;
  "/badges/$badgeId": typeof BadgesBadgeIdRoute;
  "/bottles/$bottleId": typeof BottlesBottleIdRouteWithChildren;
  "/entities/$entityId": typeof EntitiesEntityIdRouteWithChildren;
  "/flights/$flightId": typeof FlightsFlightIdRouteWithChildren;
  "/locations/$countrySlug": typeof LocationsCountrySlugRouteWithChildren;
  "/locations/all-regions": typeof LocationsAllRegionsRoute;
  "/notifications/all": typeof NotificationsAllRoute;
  "/tastings/$tastingId": typeof TastingsTastingIdRouteWithChildren;
  "/users/$username": typeof UsersUsernameRouteWithChildren;
  "/admin/": typeof AdminIndexRoute;
  "/bottlers": typeof BottlersIndexRoute;
  "/bottles": typeof BottlesIndexRoute;
  "/brands": typeof BrandsIndexRoute;
  "/distillers": typeof DistillersIndexRoute;
  "/flights": typeof FlightsIndexRoute;
  "/tastings": typeof TastingsIndexRoute;
  "/admin/badges/$badgeId": typeof AdminBadgesBadgeIdRouteWithChildren;
  "/admin/badges/add": typeof AdminBadgesAddRoute;
  "/admin/events/$eventId": typeof AdminEventsEventIdRouteWithChildren;
  "/admin/events/add": typeof AdminEventsAddRoute;
  "/admin/locations/$countrySlug": typeof AdminLocationsCountrySlugRouteWithChildren;
  "/admin/sites/$siteId": typeof AdminSitesSiteIdRouteWithChildren;
  "/admin/sites/add": typeof AdminSitesAddRoute;
  "/admin/tags/$tagId": typeof AdminTagsTagIdRouteWithChildren;
  "/admin/tags/add": typeof AdminTagsAddRoute;
  "/bottles/$bottleId/aliases": typeof BottlesBottleIdAliasesRoute;
  "/bottles/$bottleId/edit": typeof BottlesBottleIdEditRoute;
  "/bottles/$bottleId/merge": typeof BottlesBottleIdMergeRoute;
  "/bottles/$bottleId/prices": typeof BottlesBottleIdPricesRoute;
  "/bottles/$bottleId/releases": typeof BottlesBottleIdReleasesRouteWithChildren;
  "/bottles/$bottleId/similar": typeof BottlesBottleIdSimilarRoute;
  "/bottles/$bottleId/tastings": typeof BottlesBottleIdTastingsRoute;
  "/bottles/$bottleId/addRelease": typeof BottlesBottleIdAddReleaseRoute;
  "/bottles/$bottleId/addTasting": typeof BottlesBottleIdAddTastingRoute;
  "/entities/$entityId/aliases": typeof EntitiesEntityIdAliasesRoute;
  "/entities/$entityId/bottles": typeof EntitiesEntityIdBottlesRoute;
  "/entities/$entityId/codes": typeof EntitiesEntityIdCodesRoute;
  "/entities/$entityId/tastings": typeof EntitiesEntityIdTastingsRoute;
  "/entities/$entityId/edit": typeof EntitiesEntityIdEditRoute;
  "/entities/$entityId/merge": typeof EntitiesEntityIdMergeRoute;
  "/flights/$flightId/edit": typeof FlightsFlightIdEditRoute;
  "/flights/$flightId/overlay": typeof FlightsFlightIdOverlayRoute;
  "/locations/$countrySlug/regions": typeof LocationsCountrySlugRegionsRouteWithChildren;
  "/tastings/$tastingId/edit": typeof TastingsTastingIdEditRoute;
  "/users/$username/favorites": typeof UsersUsernameFavoritesRoute;
  "/bottles/$bottleId/": typeof BottlesBottleIdIndexRoute;
  "/entities/$entityId/": typeof EntitiesEntityIdIndexRoute;
  "/locations/$countrySlug/": typeof LocationsCountrySlugIndexRoute;
  "/users/$username/": typeof UsersUsernameIndexRoute;
  "/admin/badges/$badgeId/edit": typeof AdminBadgesBadgeIdEditRoute;
  "/admin/events/$eventId/edit": typeof AdminEventsEventIdEditRoute;
  "/admin/locations/$countrySlug/edit": typeof AdminLocationsCountrySlugEditRoute;
  "/admin/sites/$siteId/edit": typeof AdminSitesSiteIdEditRoute;
  "/admin/sites/$siteId/reviews": typeof AdminSitesSiteIdReviewsRoute;
  "/admin/tags/$tagId/edit": typeof AdminTagsTagIdEditRoute;
  "/locations/$countrySlug/regions/$regionSlug": typeof LocationsCountrySlugRegionsRegionSlugRoute;
  "/admin/locations/$countrySlug/": typeof AdminLocationsCountrySlugIndexRoute;
  "/admin/sites/$siteId/": typeof AdminSitesSiteIdIndexRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug": typeof AdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  "/admin/locations/$countrySlug/regions/add": typeof AdminLocationsCountrySlugRegionsAddRoute;
  "/bottles/$bottleId/releases/$releaseId/edit": typeof BottlesBottleIdReleasesReleaseIdEditRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug/edit": typeof AdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/addBottle": typeof AddBottleRoute;
  "/addEntity": typeof AddEntityRoute;
  "/addFlight": typeof AddFlightRoute;
  "/favorites": typeof FavoritesRoute;
  "/friends": typeof FriendsRoute;
  "/global-error": typeof GlobalErrorRoute;
  "/locations": typeof LocationsRouteWithChildren;
  "/login": typeof LoginRoute;
  "/not-found": typeof NotFoundRoute;
  "/notifications": typeof NotificationsRouteWithChildren;
  "/password-reset": typeof PasswordResetRoute;
  "/register": typeof RegisterRoute;
  "/search": typeof SearchRoute;
  "/settings": typeof SettingsRoute;
  "/updates": typeof UpdatesRoute;
  "/verify": typeof VerifyRoute;
  "/activity/friends": typeof ActivityFriendsRoute;
  "/activity/local": typeof ActivityLocalRoute;
  "/admin/badges": typeof AdminBadgesRouteWithChildren;
  "/admin/events": typeof AdminEventsRouteWithChildren;
  "/admin/locations": typeof AdminLocationsRouteWithChildren;
  "/admin/queue": typeof AdminQueueRoute;
  "/admin/sites": typeof AdminSitesRouteWithChildren;
  "/admin/tags": typeof AdminTagsRouteWithChildren;
  "/admin/users": typeof AdminUsersRoute;
  "/badges/$badgeId": typeof BadgesBadgeIdRoute;
  "/flights/$flightId": typeof FlightsFlightIdRouteWithChildren;
  "/locations/all-regions": typeof LocationsAllRegionsRoute;
  "/notifications/all": typeof NotificationsAllRoute;
  "/tastings/$tastingId": typeof TastingsTastingIdRouteWithChildren;
  "/admin": typeof AdminIndexRoute;
  "/bottlers": typeof BottlersIndexRoute;
  "/bottles": typeof BottlesIndexRoute;
  "/brands": typeof BrandsIndexRoute;
  "/distillers": typeof DistillersIndexRoute;
  "/flights": typeof FlightsIndexRoute;
  "/tastings": typeof TastingsIndexRoute;
  "/admin/badges/$badgeId": typeof AdminBadgesBadgeIdRouteWithChildren;
  "/admin/badges/add": typeof AdminBadgesAddRoute;
  "/admin/events/$eventId": typeof AdminEventsEventIdRouteWithChildren;
  "/admin/events/add": typeof AdminEventsAddRoute;
  "/admin/sites/add": typeof AdminSitesAddRoute;
  "/admin/tags/$tagId": typeof AdminTagsTagIdRouteWithChildren;
  "/admin/tags/add": typeof AdminTagsAddRoute;
  "/bottles/$bottleId/aliases": typeof BottlesBottleIdAliasesRoute;
  "/bottles/$bottleId/edit": typeof BottlesBottleIdEditRoute;
  "/bottles/$bottleId/merge": typeof BottlesBottleIdMergeRoute;
  "/bottles/$bottleId/prices": typeof BottlesBottleIdPricesRoute;
  "/bottles/$bottleId/releases": typeof BottlesBottleIdReleasesRouteWithChildren;
  "/bottles/$bottleId/similar": typeof BottlesBottleIdSimilarRoute;
  "/bottles/$bottleId/tastings": typeof BottlesBottleIdTastingsRoute;
  "/bottles/$bottleId/addRelease": typeof BottlesBottleIdAddReleaseRoute;
  "/bottles/$bottleId/addTasting": typeof BottlesBottleIdAddTastingRoute;
  "/entities/$entityId/aliases": typeof EntitiesEntityIdAliasesRoute;
  "/entities/$entityId/bottles": typeof EntitiesEntityIdBottlesRoute;
  "/entities/$entityId/codes": typeof EntitiesEntityIdCodesRoute;
  "/entities/$entityId/tastings": typeof EntitiesEntityIdTastingsRoute;
  "/entities/$entityId/edit": typeof EntitiesEntityIdEditRoute;
  "/entities/$entityId/merge": typeof EntitiesEntityIdMergeRoute;
  "/flights/$flightId/edit": typeof FlightsFlightIdEditRoute;
  "/flights/$flightId/overlay": typeof FlightsFlightIdOverlayRoute;
  "/locations/$countrySlug/regions": typeof LocationsCountrySlugRegionsRouteWithChildren;
  "/tastings/$tastingId/edit": typeof TastingsTastingIdEditRoute;
  "/users/$username/favorites": typeof UsersUsernameFavoritesRoute;
  "/bottles/$bottleId": typeof BottlesBottleIdIndexRoute;
  "/entities/$entityId": typeof EntitiesEntityIdIndexRoute;
  "/locations/$countrySlug": typeof LocationsCountrySlugIndexRoute;
  "/users/$username": typeof UsersUsernameIndexRoute;
  "/admin/badges/$badgeId/edit": typeof AdminBadgesBadgeIdEditRoute;
  "/admin/events/$eventId/edit": typeof AdminEventsEventIdEditRoute;
  "/admin/locations/$countrySlug/edit": typeof AdminLocationsCountrySlugEditRoute;
  "/admin/sites/$siteId/edit": typeof AdminSitesSiteIdEditRoute;
  "/admin/sites/$siteId/reviews": typeof AdminSitesSiteIdReviewsRoute;
  "/admin/tags/$tagId/edit": typeof AdminTagsTagIdEditRoute;
  "/locations/$countrySlug/regions/$regionSlug": typeof LocationsCountrySlugRegionsRegionSlugRoute;
  "/admin/locations/$countrySlug": typeof AdminLocationsCountrySlugIndexRoute;
  "/admin/sites/$siteId": typeof AdminSitesSiteIdIndexRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug": typeof AdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  "/admin/locations/$countrySlug/regions/add": typeof AdminLocationsCountrySlugRegionsAddRoute;
  "/bottles/$bottleId/releases/$releaseId/edit": typeof BottlesBottleIdReleasesReleaseIdEditRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug/edit": typeof AdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/addBottle": typeof AddBottleRoute;
  "/addEntity": typeof AddEntityRoute;
  "/addFlight": typeof AddFlightRoute;
  "/admin": typeof AdminRouteWithChildren;
  "/favorites": typeof FavoritesRoute;
  "/friends": typeof FriendsRoute;
  "/global-error": typeof GlobalErrorRoute;
  "/locations": typeof LocationsRouteWithChildren;
  "/login": typeof LoginRoute;
  "/not-found": typeof NotFoundRoute;
  "/notifications": typeof NotificationsRouteWithChildren;
  "/password-reset": typeof PasswordResetRoute;
  "/register": typeof RegisterRoute;
  "/search": typeof SearchRoute;
  "/settings": typeof SettingsRoute;
  "/updates": typeof UpdatesRoute;
  "/verify": typeof VerifyRoute;
  "/activity/friends": typeof ActivityFriendsRoute;
  "/activity/local": typeof ActivityLocalRoute;
  "/admin/badges": typeof AdminBadgesRouteWithChildren;
  "/admin/events": typeof AdminEventsRouteWithChildren;
  "/admin/locations": typeof AdminLocationsRouteWithChildren;
  "/admin/queue": typeof AdminQueueRoute;
  "/admin/sites": typeof AdminSitesRouteWithChildren;
  "/admin/tags": typeof AdminTagsRouteWithChildren;
  "/admin/users": typeof AdminUsersRoute;
  "/badges/$badgeId": typeof BadgesBadgeIdRoute;
  "/bottles/$bottleId": typeof BottlesBottleIdRouteWithChildren;
  "/entities/$entityId": typeof EntitiesEntityIdRouteWithChildren;
  "/flights/$flightId": typeof FlightsFlightIdRouteWithChildren;
  "/locations/$countrySlug": typeof LocationsCountrySlugRouteWithChildren;
  "/locations/all-regions": typeof LocationsAllRegionsRoute;
  "/notifications/all": typeof NotificationsAllRoute;
  "/tastings/$tastingId": typeof TastingsTastingIdRouteWithChildren;
  "/users/$username": typeof UsersUsernameRouteWithChildren;
  "/admin/": typeof AdminIndexRoute;
  "/bottlers/": typeof BottlersIndexRoute;
  "/bottles/": typeof BottlesIndexRoute;
  "/brands/": typeof BrandsIndexRoute;
  "/distillers/": typeof DistillersIndexRoute;
  "/flights/": typeof FlightsIndexRoute;
  "/tastings/": typeof TastingsIndexRoute;
  "/admin/badges/$badgeId": typeof AdminBadgesBadgeIdRouteWithChildren;
  "/admin/badges/add": typeof AdminBadgesAddRoute;
  "/admin/events/$eventId": typeof AdminEventsEventIdRouteWithChildren;
  "/admin/events/add": typeof AdminEventsAddRoute;
  "/admin/locations/$countrySlug": typeof AdminLocationsCountrySlugRouteWithChildren;
  "/admin/sites/$siteId": typeof AdminSitesSiteIdRouteWithChildren;
  "/admin/sites/add": typeof AdminSitesAddRoute;
  "/admin/tags/$tagId": typeof AdminTagsTagIdRouteWithChildren;
  "/admin/tags/add": typeof AdminTagsAddRoute;
  "/bottles/$bottleId/aliases": typeof BottlesBottleIdAliasesRoute;
  "/bottles/$bottleId/edit": typeof BottlesBottleIdEditRoute;
  "/bottles/$bottleId/merge": typeof BottlesBottleIdMergeRoute;
  "/bottles/$bottleId/prices": typeof BottlesBottleIdPricesRoute;
  "/bottles/$bottleId/releases": typeof BottlesBottleIdReleasesRouteWithChildren;
  "/bottles/$bottleId/similar": typeof BottlesBottleIdSimilarRoute;
  "/bottles/$bottleId/tastings": typeof BottlesBottleIdTastingsRoute;
  "/bottles_/$bottleId/addRelease": typeof BottlesBottleIdAddReleaseRoute;
  "/bottles_/$bottleId/addTasting": typeof BottlesBottleIdAddTastingRoute;
  "/entities/$entityId/aliases": typeof EntitiesEntityIdAliasesRoute;
  "/entities/$entityId/bottles": typeof EntitiesEntityIdBottlesRoute;
  "/entities/$entityId/codes": typeof EntitiesEntityIdCodesRoute;
  "/entities/$entityId/tastings": typeof EntitiesEntityIdTastingsRoute;
  "/entities_/$entityId/edit": typeof EntitiesEntityIdEditRoute;
  "/entities_/$entityId/merge": typeof EntitiesEntityIdMergeRoute;
  "/flights/$flightId/edit": typeof FlightsFlightIdEditRoute;
  "/flights/$flightId/overlay": typeof FlightsFlightIdOverlayRoute;
  "/locations/$countrySlug/regions": typeof LocationsCountrySlugRegionsRouteWithChildren;
  "/tastings/$tastingId/edit": typeof TastingsTastingIdEditRoute;
  "/users/$username/favorites": typeof UsersUsernameFavoritesRoute;
  "/bottles/$bottleId/": typeof BottlesBottleIdIndexRoute;
  "/entities/$entityId/": typeof EntitiesEntityIdIndexRoute;
  "/locations/$countrySlug/": typeof LocationsCountrySlugIndexRoute;
  "/users/$username/": typeof UsersUsernameIndexRoute;
  "/admin/badges/$badgeId/edit": typeof AdminBadgesBadgeIdEditRoute;
  "/admin/events/$eventId/edit": typeof AdminEventsEventIdEditRoute;
  "/admin/locations/$countrySlug/edit": typeof AdminLocationsCountrySlugEditRoute;
  "/admin/sites/$siteId/edit": typeof AdminSitesSiteIdEditRoute;
  "/admin/sites/$siteId/reviews": typeof AdminSitesSiteIdReviewsRoute;
  "/admin/tags/$tagId/edit": typeof AdminTagsTagIdEditRoute;
  "/locations/$countrySlug/regions/$regionSlug": typeof LocationsCountrySlugRegionsRegionSlugRoute;
  "/admin/locations/$countrySlug/": typeof AdminLocationsCountrySlugIndexRoute;
  "/admin/sites/$siteId/": typeof AdminSitesSiteIdIndexRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug": typeof AdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  "/admin/locations/$countrySlug/regions/add": typeof AdminLocationsCountrySlugRegionsAddRoute;
  "/bottles/$bottleId/releases/$releaseId/edit": typeof BottlesBottleIdReleasesReleaseIdEditRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug/edit": typeof AdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/about"
    | "/addBottle"
    | "/addEntity"
    | "/addFlight"
    | "/admin"
    | "/favorites"
    | "/friends"
    | "/global-error"
    | "/locations"
    | "/login"
    | "/not-found"
    | "/notifications"
    | "/password-reset"
    | "/register"
    | "/search"
    | "/settings"
    | "/updates"
    | "/verify"
    | "/activity/friends"
    | "/activity/local"
    | "/admin/badges"
    | "/admin/events"
    | "/admin/locations"
    | "/admin/queue"
    | "/admin/sites"
    | "/admin/tags"
    | "/admin/users"
    | "/badges/$badgeId"
    | "/bottles/$bottleId"
    | "/entities/$entityId"
    | "/flights/$flightId"
    | "/locations/$countrySlug"
    | "/locations/all-regions"
    | "/notifications/all"
    | "/tastings/$tastingId"
    | "/users/$username"
    | "/admin/"
    | "/bottlers"
    | "/bottles"
    | "/brands"
    | "/distillers"
    | "/flights"
    | "/tastings"
    | "/admin/badges/$badgeId"
    | "/admin/badges/add"
    | "/admin/events/$eventId"
    | "/admin/events/add"
    | "/admin/locations/$countrySlug"
    | "/admin/sites/$siteId"
    | "/admin/sites/add"
    | "/admin/tags/$tagId"
    | "/admin/tags/add"
    | "/bottles/$bottleId/aliases"
    | "/bottles/$bottleId/edit"
    | "/bottles/$bottleId/merge"
    | "/bottles/$bottleId/prices"
    | "/bottles/$bottleId/releases"
    | "/bottles/$bottleId/similar"
    | "/bottles/$bottleId/tastings"
    | "/bottles/$bottleId/addRelease"
    | "/bottles/$bottleId/addTasting"
    | "/entities/$entityId/aliases"
    | "/entities/$entityId/bottles"
    | "/entities/$entityId/codes"
    | "/entities/$entityId/tastings"
    | "/entities/$entityId/edit"
    | "/entities/$entityId/merge"
    | "/flights/$flightId/edit"
    | "/flights/$flightId/overlay"
    | "/locations/$countrySlug/regions"
    | "/tastings/$tastingId/edit"
    | "/users/$username/favorites"
    | "/bottles/$bottleId/"
    | "/entities/$entityId/"
    | "/locations/$countrySlug/"
    | "/users/$username/"
    | "/admin/badges/$badgeId/edit"
    | "/admin/events/$eventId/edit"
    | "/admin/locations/$countrySlug/edit"
    | "/admin/sites/$siteId/edit"
    | "/admin/sites/$siteId/reviews"
    | "/admin/tags/$tagId/edit"
    | "/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/"
    | "/admin/sites/$siteId/"
    | "/admin/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/regions/add"
    | "/bottles/$bottleId/releases/$releaseId/edit"
    | "/admin/locations/$countrySlug/regions/$regionSlug/edit";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/about"
    | "/addBottle"
    | "/addEntity"
    | "/addFlight"
    | "/favorites"
    | "/friends"
    | "/global-error"
    | "/locations"
    | "/login"
    | "/not-found"
    | "/notifications"
    | "/password-reset"
    | "/register"
    | "/search"
    | "/settings"
    | "/updates"
    | "/verify"
    | "/activity/friends"
    | "/activity/local"
    | "/admin/badges"
    | "/admin/events"
    | "/admin/locations"
    | "/admin/queue"
    | "/admin/sites"
    | "/admin/tags"
    | "/admin/users"
    | "/badges/$badgeId"
    | "/flights/$flightId"
    | "/locations/all-regions"
    | "/notifications/all"
    | "/tastings/$tastingId"
    | "/admin"
    | "/bottlers"
    | "/bottles"
    | "/brands"
    | "/distillers"
    | "/flights"
    | "/tastings"
    | "/admin/badges/$badgeId"
    | "/admin/badges/add"
    | "/admin/events/$eventId"
    | "/admin/events/add"
    | "/admin/sites/add"
    | "/admin/tags/$tagId"
    | "/admin/tags/add"
    | "/bottles/$bottleId/aliases"
    | "/bottles/$bottleId/edit"
    | "/bottles/$bottleId/merge"
    | "/bottles/$bottleId/prices"
    | "/bottles/$bottleId/releases"
    | "/bottles/$bottleId/similar"
    | "/bottles/$bottleId/tastings"
    | "/bottles/$bottleId/addRelease"
    | "/bottles/$bottleId/addTasting"
    | "/entities/$entityId/aliases"
    | "/entities/$entityId/bottles"
    | "/entities/$entityId/codes"
    | "/entities/$entityId/tastings"
    | "/entities/$entityId/edit"
    | "/entities/$entityId/merge"
    | "/flights/$flightId/edit"
    | "/flights/$flightId/overlay"
    | "/locations/$countrySlug/regions"
    | "/tastings/$tastingId/edit"
    | "/users/$username/favorites"
    | "/bottles/$bottleId"
    | "/entities/$entityId"
    | "/locations/$countrySlug"
    | "/users/$username"
    | "/admin/badges/$badgeId/edit"
    | "/admin/events/$eventId/edit"
    | "/admin/locations/$countrySlug/edit"
    | "/admin/sites/$siteId/edit"
    | "/admin/sites/$siteId/reviews"
    | "/admin/tags/$tagId/edit"
    | "/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug"
    | "/admin/sites/$siteId"
    | "/admin/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/regions/add"
    | "/bottles/$bottleId/releases/$releaseId/edit"
    | "/admin/locations/$countrySlug/regions/$regionSlug/edit";
  id:
    | "__root__"
    | "/"
    | "/about"
    | "/addBottle"
    | "/addEntity"
    | "/addFlight"
    | "/admin"
    | "/favorites"
    | "/friends"
    | "/global-error"
    | "/locations"
    | "/login"
    | "/not-found"
    | "/notifications"
    | "/password-reset"
    | "/register"
    | "/search"
    | "/settings"
    | "/updates"
    | "/verify"
    | "/activity/friends"
    | "/activity/local"
    | "/admin/badges"
    | "/admin/events"
    | "/admin/locations"
    | "/admin/queue"
    | "/admin/sites"
    | "/admin/tags"
    | "/admin/users"
    | "/badges/$badgeId"
    | "/bottles/$bottleId"
    | "/entities/$entityId"
    | "/flights/$flightId"
    | "/locations/$countrySlug"
    | "/locations/all-regions"
    | "/notifications/all"
    | "/tastings/$tastingId"
    | "/users/$username"
    | "/admin/"
    | "/bottlers/"
    | "/bottles/"
    | "/brands/"
    | "/distillers/"
    | "/flights/"
    | "/tastings/"
    | "/admin/badges/$badgeId"
    | "/admin/badges/add"
    | "/admin/events/$eventId"
    | "/admin/events/add"
    | "/admin/locations/$countrySlug"
    | "/admin/sites/$siteId"
    | "/admin/sites/add"
    | "/admin/tags/$tagId"
    | "/admin/tags/add"
    | "/bottles/$bottleId/aliases"
    | "/bottles/$bottleId/edit"
    | "/bottles/$bottleId/merge"
    | "/bottles/$bottleId/prices"
    | "/bottles/$bottleId/releases"
    | "/bottles/$bottleId/similar"
    | "/bottles/$bottleId/tastings"
    | "/bottles_/$bottleId/addRelease"
    | "/bottles_/$bottleId/addTasting"
    | "/entities/$entityId/aliases"
    | "/entities/$entityId/bottles"
    | "/entities/$entityId/codes"
    | "/entities/$entityId/tastings"
    | "/entities_/$entityId/edit"
    | "/entities_/$entityId/merge"
    | "/flights/$flightId/edit"
    | "/flights/$flightId/overlay"
    | "/locations/$countrySlug/regions"
    | "/tastings/$tastingId/edit"
    | "/users/$username/favorites"
    | "/bottles/$bottleId/"
    | "/entities/$entityId/"
    | "/locations/$countrySlug/"
    | "/users/$username/"
    | "/admin/badges/$badgeId/edit"
    | "/admin/events/$eventId/edit"
    | "/admin/locations/$countrySlug/edit"
    | "/admin/sites/$siteId/edit"
    | "/admin/sites/$siteId/reviews"
    | "/admin/tags/$tagId/edit"
    | "/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/"
    | "/admin/sites/$siteId/"
    | "/admin/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/regions/add"
    | "/bottles/$bottleId/releases/$releaseId/edit"
    | "/admin/locations/$countrySlug/regions/$regionSlug/edit";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  AddBottleRoute: typeof AddBottleRoute;
  AddEntityRoute: typeof AddEntityRoute;
  AddFlightRoute: typeof AddFlightRoute;
  AdminRoute: typeof AdminRouteWithChildren;
  FavoritesRoute: typeof FavoritesRoute;
  FriendsRoute: typeof FriendsRoute;
  GlobalErrorRoute: typeof GlobalErrorRoute;
  LocationsRoute: typeof LocationsRouteWithChildren;
  LoginRoute: typeof LoginRoute;
  NotFoundRoute: typeof NotFoundRoute;
  NotificationsRoute: typeof NotificationsRouteWithChildren;
  PasswordResetRoute: typeof PasswordResetRoute;
  RegisterRoute: typeof RegisterRoute;
  SearchRoute: typeof SearchRoute;
  SettingsRoute: typeof SettingsRoute;
  UpdatesRoute: typeof UpdatesRoute;
  VerifyRoute: typeof VerifyRoute;
  ActivityFriendsRoute: typeof ActivityFriendsRoute;
  ActivityLocalRoute: typeof ActivityLocalRoute;
  BadgesBadgeIdRoute: typeof BadgesBadgeIdRoute;
  BottlesBottleIdRoute: typeof BottlesBottleIdRouteWithChildren;
  EntitiesEntityIdRoute: typeof EntitiesEntityIdRouteWithChildren;
  FlightsFlightIdRoute: typeof FlightsFlightIdRouteWithChildren;
  TastingsTastingIdRoute: typeof TastingsTastingIdRouteWithChildren;
  UsersUsernameRoute: typeof UsersUsernameRouteWithChildren;
  BottlersIndexRoute: typeof BottlersIndexRoute;
  BottlesIndexRoute: typeof BottlesIndexRoute;
  BrandsIndexRoute: typeof BrandsIndexRoute;
  DistillersIndexRoute: typeof DistillersIndexRoute;
  FlightsIndexRoute: typeof FlightsIndexRoute;
  TastingsIndexRoute: typeof TastingsIndexRoute;
  BottlesBottleIdAddReleaseRoute: typeof BottlesBottleIdAddReleaseRoute;
  BottlesBottleIdAddTastingRoute: typeof BottlesBottleIdAddTastingRoute;
  EntitiesEntityIdEditRoute: typeof EntitiesEntityIdEditRoute;
  EntitiesEntityIdMergeRoute: typeof EntitiesEntityIdMergeRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AddBottleRoute: AddBottleRoute,
  AddEntityRoute: AddEntityRoute,
  AddFlightRoute: AddFlightRoute,
  AdminRoute: AdminRouteWithChildren,
  FavoritesRoute: FavoritesRoute,
  FriendsRoute: FriendsRoute,
  GlobalErrorRoute: GlobalErrorRoute,
  LocationsRoute: LocationsRouteWithChildren,
  LoginRoute: LoginRoute,
  NotFoundRoute: NotFoundRoute,
  NotificationsRoute: NotificationsRouteWithChildren,
  PasswordResetRoute: PasswordResetRoute,
  RegisterRoute: RegisterRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  UpdatesRoute: UpdatesRoute,
  VerifyRoute: VerifyRoute,
  ActivityFriendsRoute: ActivityFriendsRoute,
  ActivityLocalRoute: ActivityLocalRoute,
  BadgesBadgeIdRoute: BadgesBadgeIdRoute,
  BottlesBottleIdRoute: BottlesBottleIdRouteWithChildren,
  EntitiesEntityIdRoute: EntitiesEntityIdRouteWithChildren,
  FlightsFlightIdRoute: FlightsFlightIdRouteWithChildren,
  TastingsTastingIdRoute: TastingsTastingIdRouteWithChildren,
  UsersUsernameRoute: UsersUsernameRouteWithChildren,
  BottlersIndexRoute: BottlersIndexRoute,
  BottlesIndexRoute: BottlesIndexRoute,
  BrandsIndexRoute: BrandsIndexRoute,
  DistillersIndexRoute: DistillersIndexRoute,
  FlightsIndexRoute: FlightsIndexRoute,
  TastingsIndexRoute: TastingsIndexRoute,
  BottlesBottleIdAddReleaseRoute: BottlesBottleIdAddReleaseRoute,
  BottlesBottleIdAddTastingRoute: BottlesBottleIdAddTastingRoute,
  EntitiesEntityIdEditRoute: EntitiesEntityIdEditRoute,
  EntitiesEntityIdMergeRoute: EntitiesEntityIdMergeRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/addBottle",
        "/addEntity",
        "/addFlight",
        "/admin",
        "/favorites",
        "/friends",
        "/global-error",
        "/locations",
        "/login",
        "/not-found",
        "/notifications",
        "/password-reset",
        "/register",
        "/search",
        "/settings",
        "/updates",
        "/verify",
        "/activity/friends",
        "/activity/local",
        "/badges/$badgeId",
        "/bottles/$bottleId",
        "/entities/$entityId",
        "/flights/$flightId",
        "/tastings/$tastingId",
        "/users/$username",
        "/bottlers/",
        "/bottles/",
        "/brands/",
        "/distillers/",
        "/flights/",
        "/tastings/",
        "/bottles_/$bottleId/addRelease",
        "/bottles_/$bottleId/addTasting",
        "/entities_/$entityId/edit",
        "/entities_/$entityId/merge"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/addBottle": {
      "filePath": "addBottle.tsx"
    },
    "/addEntity": {
      "filePath": "addEntity.tsx"
    },
    "/addFlight": {
      "filePath": "addFlight.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/badges",
        "/admin/events",
        "/admin/locations",
        "/admin/queue",
        "/admin/sites",
        "/admin/tags",
        "/admin/users",
        "/admin/"
      ]
    },
    "/favorites": {
      "filePath": "favorites.tsx"
    },
    "/friends": {
      "filePath": "friends.tsx"
    },
    "/global-error": {
      "filePath": "global-error.tsx"
    },
    "/locations": {
      "filePath": "locations.tsx",
      "children": [
        "/locations/$countrySlug",
        "/locations/all-regions"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/notifications": {
      "filePath": "notifications.tsx",
      "children": [
        "/notifications/all"
      ]
    },
    "/password-reset": {
      "filePath": "password-reset.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/updates": {
      "filePath": "updates.tsx"
    },
    "/verify": {
      "filePath": "verify.tsx"
    },
    "/activity/friends": {
      "filePath": "activity.friends.tsx"
    },
    "/activity/local": {
      "filePath": "activity.local.tsx"
    },
    "/admin/badges": {
      "filePath": "admin.badges.tsx",
      "parent": "/admin",
      "children": [
        "/admin/badges/$badgeId",
        "/admin/badges/add"
      ]
    },
    "/admin/events": {
      "filePath": "admin.events.tsx",
      "parent": "/admin",
      "children": [
        "/admin/events/$eventId",
        "/admin/events/add"
      ]
    },
    "/admin/locations": {
      "filePath": "admin.locations.tsx",
      "parent": "/admin",
      "children": [
        "/admin/locations/$countrySlug"
      ]
    },
    "/admin/queue": {
      "filePath": "admin.queue.tsx",
      "parent": "/admin"
    },
    "/admin/sites": {
      "filePath": "admin.sites.tsx",
      "parent": "/admin",
      "children": [
        "/admin/sites/$siteId",
        "/admin/sites/add"
      ]
    },
    "/admin/tags": {
      "filePath": "admin.tags.tsx",
      "parent": "/admin",
      "children": [
        "/admin/tags/$tagId",
        "/admin/tags/add"
      ]
    },
    "/admin/users": {
      "filePath": "admin.users.tsx",
      "parent": "/admin"
    },
    "/badges/$badgeId": {
      "filePath": "badges.$badgeId.tsx"
    },
    "/bottles/$bottleId": {
      "filePath": "bottles.$bottleId.tsx",
      "children": [
        "/bottles/$bottleId/aliases",
        "/bottles/$bottleId/edit",
        "/bottles/$bottleId/merge",
        "/bottles/$bottleId/prices",
        "/bottles/$bottleId/releases",
        "/bottles/$bottleId/similar",
        "/bottles/$bottleId/tastings",
        "/bottles/$bottleId/"
      ]
    },
    "/entities/$entityId": {
      "filePath": "entities.$entityId.tsx",
      "children": [
        "/entities/$entityId/aliases",
        "/entities/$entityId/bottles",
        "/entities/$entityId/codes",
        "/entities/$entityId/tastings",
        "/entities/$entityId/"
      ]
    },
    "/flights/$flightId": {
      "filePath": "flights.$flightId.tsx",
      "children": [
        "/flights/$flightId/edit",
        "/flights/$flightId/overlay"
      ]
    },
    "/locations/$countrySlug": {
      "filePath": "locations.$countrySlug.tsx",
      "parent": "/locations",
      "children": [
        "/locations/$countrySlug/regions",
        "/locations/$countrySlug/"
      ]
    },
    "/locations/all-regions": {
      "filePath": "locations.all-regions.tsx",
      "parent": "/locations"
    },
    "/notifications/all": {
      "filePath": "notifications.all.tsx",
      "parent": "/notifications"
    },
    "/tastings/$tastingId": {
      "filePath": "tastings.$tastingId.tsx",
      "children": [
        "/tastings/$tastingId/edit"
      ]
    },
    "/users/$username": {
      "filePath": "users.$username.tsx",
      "children": [
        "/users/$username/favorites",
        "/users/$username/"
      ]
    },
    "/admin/": {
      "filePath": "admin.index.tsx",
      "parent": "/admin"
    },
    "/bottlers/": {
      "filePath": "bottlers.index.tsx"
    },
    "/bottles/": {
      "filePath": "bottles.index.tsx"
    },
    "/brands/": {
      "filePath": "brands.index.tsx"
    },
    "/distillers/": {
      "filePath": "distillers.index.tsx"
    },
    "/flights/": {
      "filePath": "flights.index.tsx"
    },
    "/tastings/": {
      "filePath": "tastings.index.tsx"
    },
    "/admin/badges/$badgeId": {
      "filePath": "admin.badges.$badgeId.tsx",
      "parent": "/admin/badges",
      "children": [
        "/admin/badges/$badgeId/edit"
      ]
    },
    "/admin/badges/add": {
      "filePath": "admin.badges.add.tsx",
      "parent": "/admin/badges"
    },
    "/admin/events/$eventId": {
      "filePath": "admin.events.$eventId.tsx",
      "parent": "/admin/events",
      "children": [
        "/admin/events/$eventId/edit"
      ]
    },
    "/admin/events/add": {
      "filePath": "admin.events.add.tsx",
      "parent": "/admin/events"
    },
    "/admin/locations/$countrySlug": {
      "filePath": "admin.locations.$countrySlug.tsx",
      "parent": "/admin/locations",
      "children": [
        "/admin/locations/$countrySlug/edit",
        "/admin/locations/$countrySlug/",
        "/admin/locations/$countrySlug/regions/$regionSlug",
        "/admin/locations/$countrySlug/regions/add"
      ]
    },
    "/admin/sites/$siteId": {
      "filePath": "admin.sites.$siteId.tsx",
      "parent": "/admin/sites",
      "children": [
        "/admin/sites/$siteId/edit",
        "/admin/sites/$siteId/reviews",
        "/admin/sites/$siteId/"
      ]
    },
    "/admin/sites/add": {
      "filePath": "admin.sites.add.tsx",
      "parent": "/admin/sites"
    },
    "/admin/tags/$tagId": {
      "filePath": "admin.tags.$tagId.tsx",
      "parent": "/admin/tags",
      "children": [
        "/admin/tags/$tagId/edit"
      ]
    },
    "/admin/tags/add": {
      "filePath": "admin.tags.add.tsx",
      "parent": "/admin/tags"
    },
    "/bottles/$bottleId/aliases": {
      "filePath": "bottles.$bottleId.aliases.tsx",
      "parent": "/bottles/$bottleId"
    },
    "/bottles/$bottleId/edit": {
      "filePath": "bottles.$bottleId.edit.tsx",
      "parent": "/bottles/$bottleId"
    },
    "/bottles/$bottleId/merge": {
      "filePath": "bottles.$bottleId.merge.tsx",
      "parent": "/bottles/$bottleId"
    },
    "/bottles/$bottleId/prices": {
      "filePath": "bottles.$bottleId.prices.tsx",
      "parent": "/bottles/$bottleId"
    },
    "/bottles/$bottleId/releases": {
      "filePath": "bottles.$bottleId.releases.tsx",
      "parent": "/bottles/$bottleId",
      "children": [
        "/bottles/$bottleId/releases/$releaseId/edit"
      ]
    },
    "/bottles/$bottleId/similar": {
      "filePath": "bottles.$bottleId.similar.tsx",
      "parent": "/bottles/$bottleId"
    },
    "/bottles/$bottleId/tastings": {
      "filePath": "bottles.$bottleId.tastings.tsx",
      "parent": "/bottles/$bottleId"
    },
    "/bottles_/$bottleId/addRelease": {
      "filePath": "bottles_.$bottleId.addRelease.tsx"
    },
    "/bottles_/$bottleId/addTasting": {
      "filePath": "bottles_.$bottleId.addTasting.tsx"
    },
    "/entities/$entityId/aliases": {
      "filePath": "entities.$entityId.aliases.tsx",
      "parent": "/entities/$entityId"
    },
    "/entities/$entityId/bottles": {
      "filePath": "entities.$entityId.bottles.tsx",
      "parent": "/entities/$entityId"
    },
    "/entities/$entityId/codes": {
      "filePath": "entities.$entityId.codes.tsx",
      "parent": "/entities/$entityId"
    },
    "/entities/$entityId/tastings": {
      "filePath": "entities.$entityId.tastings.tsx",
      "parent": "/entities/$entityId"
    },
    "/entities_/$entityId/edit": {
      "filePath": "entities_.$entityId.edit.tsx"
    },
    "/entities_/$entityId/merge": {
      "filePath": "entities_.$entityId.merge.tsx"
    },
    "/flights/$flightId/edit": {
      "filePath": "flights.$flightId.edit.tsx",
      "parent": "/flights/$flightId"
    },
    "/flights/$flightId/overlay": {
      "filePath": "flights.$flightId.overlay.tsx",
      "parent": "/flights/$flightId"
    },
    "/locations/$countrySlug/regions": {
      "filePath": "locations.$countrySlug.regions.tsx",
      "parent": "/locations/$countrySlug",
      "children": [
        "/locations/$countrySlug/regions/$regionSlug"
      ]
    },
    "/tastings/$tastingId/edit": {
      "filePath": "tastings.$tastingId.edit.tsx",
      "parent": "/tastings/$tastingId"
    },
    "/users/$username/favorites": {
      "filePath": "users.$username.favorites.tsx",
      "parent": "/users/$username"
    },
    "/bottles/$bottleId/": {
      "filePath": "bottles.$bottleId.index.tsx",
      "parent": "/bottles/$bottleId"
    },
    "/entities/$entityId/": {
      "filePath": "entities.$entityId.index.tsx",
      "parent": "/entities/$entityId"
    },
    "/locations/$countrySlug/": {
      "filePath": "locations.$countrySlug.index.tsx",
      "parent": "/locations/$countrySlug"
    },
    "/users/$username/": {
      "filePath": "users.$username.index.tsx",
      "parent": "/users/$username"
    },
    "/admin/badges/$badgeId/edit": {
      "filePath": "admin.badges.$badgeId.edit.tsx",
      "parent": "/admin/badges/$badgeId"
    },
    "/admin/events/$eventId/edit": {
      "filePath": "admin.events.$eventId.edit.tsx",
      "parent": "/admin/events/$eventId"
    },
    "/admin/locations/$countrySlug/edit": {
      "filePath": "admin.locations.$countrySlug.edit.tsx",
      "parent": "/admin/locations/$countrySlug"
    },
    "/admin/sites/$siteId/edit": {
      "filePath": "admin.sites.$siteId.edit.tsx",
      "parent": "/admin/sites/$siteId"
    },
    "/admin/sites/$siteId/reviews": {
      "filePath": "admin.sites.$siteId.reviews.tsx",
      "parent": "/admin/sites/$siteId"
    },
    "/admin/tags/$tagId/edit": {
      "filePath": "admin.tags.$tagId.edit.tsx",
      "parent": "/admin/tags/$tagId"
    },
    "/locations/$countrySlug/regions/$regionSlug": {
      "filePath": "locations.$countrySlug.regions.$regionSlug.tsx",
      "parent": "/locations/$countrySlug/regions"
    },
    "/admin/locations/$countrySlug/": {
      "filePath": "admin.locations.$countrySlug.index.tsx",
      "parent": "/admin/locations/$countrySlug"
    },
    "/admin/sites/$siteId/": {
      "filePath": "admin.sites.$siteId.index.tsx",
      "parent": "/admin/sites/$siteId"
    },
    "/admin/locations/$countrySlug/regions/$regionSlug": {
      "filePath": "admin.locations.$countrySlug.regions.$regionSlug.tsx",
      "parent": "/admin/locations/$countrySlug",
      "children": [
        "/admin/locations/$countrySlug/regions/$regionSlug/edit"
      ]
    },
    "/admin/locations/$countrySlug/regions/add": {
      "filePath": "admin.locations.$countrySlug.regions.add.tsx",
      "parent": "/admin/locations/$countrySlug"
    },
    "/bottles/$bottleId/releases/$releaseId/edit": {
      "filePath": "bottles.$bottleId.releases.$releaseId.edit.tsx",
      "parent": "/bottles/$bottleId/releases"
    },
    "/admin/locations/$countrySlug/regions/$regionSlug/edit": {
      "filePath": "admin.locations.$countrySlug.regions.$regionSlug.edit.tsx",
      "parent": "/admin/locations/$countrySlug/regions/$regionSlug"
    }
  }
}
ROUTE_MANIFEST_END */
