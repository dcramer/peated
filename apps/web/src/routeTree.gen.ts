/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as DefaultRouteImport } from "./routes/_default";
import { Route as DefaultAboutRouteImport } from "./routes/_default/about";
import { Route as DefaultActivityFriendsRouteImport } from "./routes/_default/activity.friends";
import { Route as DefaultActivityLocalRouteImport } from "./routes/_default/activity.local";
import { Route as DefaultAdminRouteImport } from "./routes/_default/admin";
import { Route as DefaultAdminBadgesRouteImport } from "./routes/_default/admin.badges";
import { Route as DefaultAdminBadgesBadgeIdRouteImport } from "./routes/_default/admin.badges.$badgeId";
import { Route as DefaultAdminBadgesBadgeIdEditRouteImport } from "./routes/_default/admin.badges.$badgeId.edit";
import { Route as DefaultAdminBadgesAddRouteImport } from "./routes/_default/admin.badges.add";
import { Route as DefaultAdminEventsRouteImport } from "./routes/_default/admin.events";
import { Route as DefaultAdminEventsEventIdRouteImport } from "./routes/_default/admin.events.$eventId";
import { Route as DefaultAdminEventsEventIdEditRouteImport } from "./routes/_default/admin.events.$eventId.edit";
import { Route as DefaultAdminEventsAddRouteImport } from "./routes/_default/admin.events.add";
import { Route as DefaultAdminIndexRouteImport } from "./routes/_default/admin.index";
import { Route as DefaultAdminLocationsRouteImport } from "./routes/_default/admin.locations";
import { Route as DefaultAdminLocationsCountrySlugRouteImport } from "./routes/_default/admin.locations.$countrySlug";
import { Route as DefaultAdminLocationsCountrySlugEditRouteImport } from "./routes/_default/admin.locations.$countrySlug.edit";
import { Route as DefaultAdminLocationsCountrySlugIndexRouteImport } from "./routes/_default/admin.locations.$countrySlug.index";
import { Route as DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteImport } from "./routes/_default/admin.locations.$countrySlug.regions.$regionSlug";
import { Route as DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRouteImport } from "./routes/_default/admin.locations.$countrySlug.regions.$regionSlug.edit";
import { Route as DefaultAdminLocationsCountrySlugRegionsAddRouteImport } from "./routes/_default/admin.locations.$countrySlug.regions.add";
import { Route as DefaultAdminQueueRouteImport } from "./routes/_default/admin.queue";
import { Route as DefaultAdminSitesRouteImport } from "./routes/_default/admin.sites";
import { Route as DefaultAdminSitesSiteIdRouteImport } from "./routes/_default/admin.sites.$siteId";
import { Route as DefaultAdminSitesSiteIdEditRouteImport } from "./routes/_default/admin.sites.$siteId.edit";
import { Route as DefaultAdminSitesSiteIdIndexRouteImport } from "./routes/_default/admin.sites.$siteId.index";
import { Route as DefaultAdminSitesSiteIdReviewsRouteImport } from "./routes/_default/admin.sites.$siteId.reviews";
import { Route as DefaultAdminSitesAddRouteImport } from "./routes/_default/admin.sites.add";
import { Route as DefaultAdminTagsRouteImport } from "./routes/_default/admin.tags";
import { Route as DefaultAdminTagsTagIdRouteImport } from "./routes/_default/admin.tags.$tagId";
import { Route as DefaultAdminTagsTagIdEditRouteImport } from "./routes/_default/admin.tags.$tagId.edit";
import { Route as DefaultAdminTagsAddRouteImport } from "./routes/_default/admin.tags.add";
import { Route as DefaultAdminUsersRouteImport } from "./routes/_default/admin.users";
import { Route as DefaultBadgesBadgeIdRouteImport } from "./routes/_default/badges.$badgeId";
import { Route as DefaultBottlersIndexRouteImport } from "./routes/_default/bottlers.index";
import { Route as DefaultBottlesBottleIdRouteImport } from "./routes/_default/bottles.$bottleId";
import { Route as DefaultBottlesBottleIdAliasesRouteImport } from "./routes/_default/bottles.$bottleId.aliases";
import { Route as DefaultBottlesBottleIdEditRouteImport } from "./routes/_default/bottles.$bottleId.edit";
import { Route as DefaultBottlesBottleIdIndexRouteImport } from "./routes/_default/bottles.$bottleId.index";
import { Route as DefaultBottlesBottleIdMergeRouteImport } from "./routes/_default/bottles.$bottleId.merge";
import { Route as DefaultBottlesBottleIdPricesRouteImport } from "./routes/_default/bottles.$bottleId.prices";
import { Route as DefaultBottlesBottleIdReleasesRouteImport } from "./routes/_default/bottles.$bottleId.releases";
import { Route as DefaultBottlesBottleIdReleasesReleaseIdEditRouteImport } from "./routes/_default/bottles.$bottleId.releases.$releaseId.edit";
import { Route as DefaultBottlesBottleIdSimilarRouteImport } from "./routes/_default/bottles.$bottleId.similar";
import { Route as DefaultBottlesBottleIdTastingsRouteImport } from "./routes/_default/bottles.$bottleId.tastings";
import { Route as DefaultBottlesIndexRouteImport } from "./routes/_default/bottles.index";
import { Route as DefaultBrandsIndexRouteImport } from "./routes/_default/brands.index";
import { Route as DefaultDistillersIndexRouteImport } from "./routes/_default/distillers.index";
import { Route as DefaultEntitiesEntityIdRouteImport } from "./routes/_default/entities.$entityId";
import { Route as DefaultEntitiesEntityIdAliasesRouteImport } from "./routes/_default/entities.$entityId.aliases";
import { Route as DefaultEntitiesEntityIdBottlesRouteImport } from "./routes/_default/entities.$entityId.bottles";
import { Route as DefaultEntitiesEntityIdCodesRouteImport } from "./routes/_default/entities.$entityId.codes";
import { Route as DefaultEntitiesEntityIdIndexRouteImport } from "./routes/_default/entities.$entityId.index";
import { Route as DefaultEntitiesEntityIdTastingsRouteImport } from "./routes/_default/entities.$entityId.tastings";
import { Route as DefaultFavoritesRouteImport } from "./routes/_default/favorites";
import { Route as DefaultFlightsFlightIdRouteImport } from "./routes/_default/flights.$flightId";
import { Route as DefaultFlightsFlightIdEditRouteImport } from "./routes/_default/flights.$flightId.edit";
import { Route as DefaultFlightsFlightIdOverlayRouteImport } from "./routes/_default/flights.$flightId.overlay";
import { Route as DefaultFlightsIndexRouteImport } from "./routes/_default/flights.index";
import { Route as DefaultFriendsRouteImport } from "./routes/_default/friends";
import { Route as DefaultIndexRouteImport } from "./routes/_default/index";
import { Route as DefaultLocationsRouteImport } from "./routes/_default/locations";
import { Route as DefaultLocationsCountrySlugRouteImport } from "./routes/_default/locations.$countrySlug";
import { Route as DefaultLocationsCountrySlugIndexRouteImport } from "./routes/_default/locations.$countrySlug.index";
import { Route as DefaultLocationsCountrySlugRegionsRouteImport } from "./routes/_default/locations.$countrySlug.regions";
import { Route as DefaultLocationsCountrySlugRegionsRegionSlugRouteImport } from "./routes/_default/locations.$countrySlug.regions.$regionSlug";
import { Route as DefaultLocationsAllRegionsRouteImport } from "./routes/_default/locations.all-regions";
import { Route as DefaultLoginRouteImport } from "./routes/_default/login";
import { Route as DefaultNotFoundRouteImport } from "./routes/_default/not-found";
import { Route as DefaultNotificationsRouteImport } from "./routes/_default/notifications";
import { Route as DefaultNotificationsAllRouteImport } from "./routes/_default/notifications.all";
import { Route as DefaultPasswordResetRouteImport } from "./routes/_default/password-reset";
import { Route as DefaultRegisterRouteImport } from "./routes/_default/register";
import { Route as DefaultSearchRouteImport } from "./routes/_default/search";
import { Route as DefaultSettingsRouteImport } from "./routes/_default/settings";
import { Route as DefaultTastingsTastingIdRouteImport } from "./routes/_default/tastings.$tastingId";
import { Route as DefaultTastingsTastingIdEditRouteImport } from "./routes/_default/tastings.$tastingId.edit";
import { Route as DefaultTastingsIndexRouteImport } from "./routes/_default/tastings.index";
import { Route as DefaultUpdatesRouteImport } from "./routes/_default/updates";
import { Route as DefaultUsersUsernameRouteImport } from "./routes/_default/users.$username";
import { Route as DefaultUsersUsernameFavoritesRouteImport } from "./routes/_default/users.$username.favorites";
import { Route as DefaultUsersUsernameIndexRouteImport } from "./routes/_default/users.$username.index";
import { Route as DefaultVerifyRouteImport } from "./routes/_default/verify";
import { Route as AddBottleRouteImport } from "./routes/addBottle";
import { Route as AddEntityRouteImport } from "./routes/addEntity";
import { Route as AddFlightRouteImport } from "./routes/addFlight";
import { Route as BottlesBottleIdAddReleaseRouteImport } from "./routes/bottles_.$bottleId.addRelease";
import { Route as BottlesBottleIdAddTastingRouteImport } from "./routes/bottles_.$bottleId.addTasting";
import { Route as EntitiesEntityIdEditRouteImport } from "./routes/entities_.$entityId.edit";
import { Route as EntitiesEntityIdMergeRouteImport } from "./routes/entities_.$entityId.merge";

// Create/Update Routes

const AddFlightRoute = AddFlightRouteImport.update({
  id: "/addFlight",
  path: "/addFlight",
  getParentRoute: () => rootRoute,
} as any);

const AddEntityRoute = AddEntityRouteImport.update({
  id: "/addEntity",
  path: "/addEntity",
  getParentRoute: () => rootRoute,
} as any);

const AddBottleRoute = AddBottleRouteImport.update({
  id: "/addBottle",
  path: "/addBottle",
  getParentRoute: () => rootRoute,
} as any);

const DefaultRoute = DefaultRouteImport.update({
  id: "/_default",
  getParentRoute: () => rootRoute,
} as any);

const DefaultIndexRoute = DefaultIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultVerifyRoute = DefaultVerifyRouteImport.update({
  id: "/verify",
  path: "/verify",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultUpdatesRoute = DefaultUpdatesRouteImport.update({
  id: "/updates",
  path: "/updates",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultSettingsRoute = DefaultSettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultSearchRoute = DefaultSearchRouteImport.update({
  id: "/search",
  path: "/search",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultRegisterRoute = DefaultRegisterRouteImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultPasswordResetRoute = DefaultPasswordResetRouteImport.update({
  id: "/password-reset",
  path: "/password-reset",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultNotificationsRoute = DefaultNotificationsRouteImport.update({
  id: "/notifications",
  path: "/notifications",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultNotFoundRoute = DefaultNotFoundRouteImport.update({
  id: "/not-found",
  path: "/not-found",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultLoginRoute = DefaultLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultLocationsRoute = DefaultLocationsRouteImport.update({
  id: "/locations",
  path: "/locations",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultFriendsRoute = DefaultFriendsRouteImport.update({
  id: "/friends",
  path: "/friends",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultFavoritesRoute = DefaultFavoritesRouteImport.update({
  id: "/favorites",
  path: "/favorites",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultAdminRoute = DefaultAdminRouteImport.update({
  id: "/admin",
  path: "/admin",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultAboutRoute = DefaultAboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultTastingsIndexRoute = DefaultTastingsIndexRouteImport.update({
  id: "/tastings/",
  path: "/tastings/",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultFlightsIndexRoute = DefaultFlightsIndexRouteImport.update({
  id: "/flights/",
  path: "/flights/",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultDistillersIndexRoute = DefaultDistillersIndexRouteImport.update({
  id: "/distillers/",
  path: "/distillers/",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultBrandsIndexRoute = DefaultBrandsIndexRouteImport.update({
  id: "/brands/",
  path: "/brands/",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultBottlesIndexRoute = DefaultBottlesIndexRouteImport.update({
  id: "/bottles/",
  path: "/bottles/",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultBottlersIndexRoute = DefaultBottlersIndexRouteImport.update({
  id: "/bottlers/",
  path: "/bottlers/",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultAdminIndexRoute = DefaultAdminIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const EntitiesEntityIdMergeRoute = EntitiesEntityIdMergeRouteImport.update({
  id: "/entities_/$entityId/merge",
  path: "/entities/$entityId/merge",
  getParentRoute: () => rootRoute,
} as any);

const EntitiesEntityIdEditRoute = EntitiesEntityIdEditRouteImport.update({
  id: "/entities_/$entityId/edit",
  path: "/entities/$entityId/edit",
  getParentRoute: () => rootRoute,
} as any);

const BottlesBottleIdAddTastingRoute =
  BottlesBottleIdAddTastingRouteImport.update({
    id: "/bottles_/$bottleId/addTasting",
    path: "/bottles/$bottleId/addTasting",
    getParentRoute: () => rootRoute,
  } as any);

const BottlesBottleIdAddReleaseRoute =
  BottlesBottleIdAddReleaseRouteImport.update({
    id: "/bottles_/$bottleId/addRelease",
    path: "/bottles/$bottleId/addRelease",
    getParentRoute: () => rootRoute,
  } as any);

const DefaultUsersUsernameRoute = DefaultUsersUsernameRouteImport.update({
  id: "/users/$username",
  path: "/users/$username",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultTastingsTastingIdRoute =
  DefaultTastingsTastingIdRouteImport.update({
    id: "/tastings/$tastingId",
    path: "/tastings/$tastingId",
    getParentRoute: () => DefaultRoute,
  } as any);

const DefaultNotificationsAllRoute = DefaultNotificationsAllRouteImport.update({
  id: "/all",
  path: "/all",
  getParentRoute: () => DefaultNotificationsRoute,
} as any);

const DefaultLocationsAllRegionsRoute =
  DefaultLocationsAllRegionsRouteImport.update({
    id: "/all-regions",
    path: "/all-regions",
    getParentRoute: () => DefaultLocationsRoute,
  } as any);

const DefaultLocationsCountrySlugRoute =
  DefaultLocationsCountrySlugRouteImport.update({
    id: "/$countrySlug",
    path: "/$countrySlug",
    getParentRoute: () => DefaultLocationsRoute,
  } as any);

const DefaultFlightsFlightIdRoute = DefaultFlightsFlightIdRouteImport.update({
  id: "/flights/$flightId",
  path: "/flights/$flightId",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultEntitiesEntityIdRoute = DefaultEntitiesEntityIdRouteImport.update({
  id: "/entities/$entityId",
  path: "/entities/$entityId",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultBottlesBottleIdRoute = DefaultBottlesBottleIdRouteImport.update({
  id: "/bottles/$bottleId",
  path: "/bottles/$bottleId",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultBadgesBadgeIdRoute = DefaultBadgesBadgeIdRouteImport.update({
  id: "/badges/$badgeId",
  path: "/badges/$badgeId",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultAdminUsersRoute = DefaultAdminUsersRouteImport.update({
  id: "/users",
  path: "/users",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const DefaultAdminTagsRoute = DefaultAdminTagsRouteImport.update({
  id: "/tags",
  path: "/tags",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const DefaultAdminSitesRoute = DefaultAdminSitesRouteImport.update({
  id: "/sites",
  path: "/sites",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const DefaultAdminQueueRoute = DefaultAdminQueueRouteImport.update({
  id: "/queue",
  path: "/queue",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const DefaultAdminLocationsRoute = DefaultAdminLocationsRouteImport.update({
  id: "/locations",
  path: "/locations",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const DefaultAdminEventsRoute = DefaultAdminEventsRouteImport.update({
  id: "/events",
  path: "/events",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const DefaultAdminBadgesRoute = DefaultAdminBadgesRouteImport.update({
  id: "/badges",
  path: "/badges",
  getParentRoute: () => DefaultAdminRoute,
} as any);

const DefaultActivityLocalRoute = DefaultActivityLocalRouteImport.update({
  id: "/activity/local",
  path: "/activity/local",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultActivityFriendsRoute = DefaultActivityFriendsRouteImport.update({
  id: "/activity/friends",
  path: "/activity/friends",
  getParentRoute: () => DefaultRoute,
} as any);

const DefaultUsersUsernameIndexRoute =
  DefaultUsersUsernameIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => DefaultUsersUsernameRoute,
  } as any);

const DefaultLocationsCountrySlugIndexRoute =
  DefaultLocationsCountrySlugIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => DefaultLocationsCountrySlugRoute,
  } as any);

const DefaultEntitiesEntityIdIndexRoute =
  DefaultEntitiesEntityIdIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => DefaultEntitiesEntityIdRoute,
  } as any);

const DefaultBottlesBottleIdIndexRoute =
  DefaultBottlesBottleIdIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultUsersUsernameFavoritesRoute =
  DefaultUsersUsernameFavoritesRouteImport.update({
    id: "/favorites",
    path: "/favorites",
    getParentRoute: () => DefaultUsersUsernameRoute,
  } as any);

const DefaultTastingsTastingIdEditRoute =
  DefaultTastingsTastingIdEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultTastingsTastingIdRoute,
  } as any);

const DefaultLocationsCountrySlugRegionsRoute =
  DefaultLocationsCountrySlugRegionsRouteImport.update({
    id: "/regions",
    path: "/regions",
    getParentRoute: () => DefaultLocationsCountrySlugRoute,
  } as any);

const DefaultFlightsFlightIdOverlayRoute =
  DefaultFlightsFlightIdOverlayRouteImport.update({
    id: "/overlay",
    path: "/overlay",
    getParentRoute: () => DefaultFlightsFlightIdRoute,
  } as any);

const DefaultFlightsFlightIdEditRoute =
  DefaultFlightsFlightIdEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultFlightsFlightIdRoute,
  } as any);

const DefaultEntitiesEntityIdTastingsRoute =
  DefaultEntitiesEntityIdTastingsRouteImport.update({
    id: "/tastings",
    path: "/tastings",
    getParentRoute: () => DefaultEntitiesEntityIdRoute,
  } as any);

const DefaultEntitiesEntityIdCodesRoute =
  DefaultEntitiesEntityIdCodesRouteImport.update({
    id: "/codes",
    path: "/codes",
    getParentRoute: () => DefaultEntitiesEntityIdRoute,
  } as any);

const DefaultEntitiesEntityIdBottlesRoute =
  DefaultEntitiesEntityIdBottlesRouteImport.update({
    id: "/bottles",
    path: "/bottles",
    getParentRoute: () => DefaultEntitiesEntityIdRoute,
  } as any);

const DefaultEntitiesEntityIdAliasesRoute =
  DefaultEntitiesEntityIdAliasesRouteImport.update({
    id: "/aliases",
    path: "/aliases",
    getParentRoute: () => DefaultEntitiesEntityIdRoute,
  } as any);

const DefaultBottlesBottleIdTastingsRoute =
  DefaultBottlesBottleIdTastingsRouteImport.update({
    id: "/tastings",
    path: "/tastings",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultBottlesBottleIdSimilarRoute =
  DefaultBottlesBottleIdSimilarRouteImport.update({
    id: "/similar",
    path: "/similar",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultBottlesBottleIdReleasesRoute =
  DefaultBottlesBottleIdReleasesRouteImport.update({
    id: "/releases",
    path: "/releases",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultBottlesBottleIdPricesRoute =
  DefaultBottlesBottleIdPricesRouteImport.update({
    id: "/prices",
    path: "/prices",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultBottlesBottleIdMergeRoute =
  DefaultBottlesBottleIdMergeRouteImport.update({
    id: "/merge",
    path: "/merge",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultBottlesBottleIdEditRoute =
  DefaultBottlesBottleIdEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultBottlesBottleIdAliasesRoute =
  DefaultBottlesBottleIdAliasesRouteImport.update({
    id: "/aliases",
    path: "/aliases",
    getParentRoute: () => DefaultBottlesBottleIdRoute,
  } as any);

const DefaultAdminTagsAddRoute = DefaultAdminTagsAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => DefaultAdminTagsRoute,
} as any);

const DefaultAdminTagsTagIdRoute = DefaultAdminTagsTagIdRouteImport.update({
  id: "/$tagId",
  path: "/$tagId",
  getParentRoute: () => DefaultAdminTagsRoute,
} as any);

const DefaultAdminSitesAddRoute = DefaultAdminSitesAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => DefaultAdminSitesRoute,
} as any);

const DefaultAdminSitesSiteIdRoute = DefaultAdminSitesSiteIdRouteImport.update({
  id: "/$siteId",
  path: "/$siteId",
  getParentRoute: () => DefaultAdminSitesRoute,
} as any);

const DefaultAdminLocationsCountrySlugRoute =
  DefaultAdminLocationsCountrySlugRouteImport.update({
    id: "/$countrySlug",
    path: "/$countrySlug",
    getParentRoute: () => DefaultAdminLocationsRoute,
  } as any);

const DefaultAdminEventsAddRoute = DefaultAdminEventsAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => DefaultAdminEventsRoute,
} as any);

const DefaultAdminEventsEventIdRoute =
  DefaultAdminEventsEventIdRouteImport.update({
    id: "/$eventId",
    path: "/$eventId",
    getParentRoute: () => DefaultAdminEventsRoute,
  } as any);

const DefaultAdminBadgesAddRoute = DefaultAdminBadgesAddRouteImport.update({
  id: "/add",
  path: "/add",
  getParentRoute: () => DefaultAdminBadgesRoute,
} as any);

const DefaultAdminBadgesBadgeIdRoute =
  DefaultAdminBadgesBadgeIdRouteImport.update({
    id: "/$badgeId",
    path: "/$badgeId",
    getParentRoute: () => DefaultAdminBadgesRoute,
  } as any);

const DefaultAdminSitesSiteIdIndexRoute =
  DefaultAdminSitesSiteIdIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => DefaultAdminSitesSiteIdRoute,
  } as any);

const DefaultAdminLocationsCountrySlugIndexRoute =
  DefaultAdminLocationsCountrySlugIndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => DefaultAdminLocationsCountrySlugRoute,
  } as any);

const DefaultLocationsCountrySlugRegionsRegionSlugRoute =
  DefaultLocationsCountrySlugRegionsRegionSlugRouteImport.update({
    id: "/$regionSlug",
    path: "/$regionSlug",
    getParentRoute: () => DefaultLocationsCountrySlugRegionsRoute,
  } as any);

const DefaultAdminTagsTagIdEditRoute =
  DefaultAdminTagsTagIdEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultAdminTagsTagIdRoute,
  } as any);

const DefaultAdminSitesSiteIdReviewsRoute =
  DefaultAdminSitesSiteIdReviewsRouteImport.update({
    id: "/reviews",
    path: "/reviews",
    getParentRoute: () => DefaultAdminSitesSiteIdRoute,
  } as any);

const DefaultAdminSitesSiteIdEditRoute =
  DefaultAdminSitesSiteIdEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultAdminSitesSiteIdRoute,
  } as any);

const DefaultAdminLocationsCountrySlugEditRoute =
  DefaultAdminLocationsCountrySlugEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultAdminLocationsCountrySlugRoute,
  } as any);

const DefaultAdminEventsEventIdEditRoute =
  DefaultAdminEventsEventIdEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultAdminEventsEventIdRoute,
  } as any);

const DefaultAdminBadgesBadgeIdEditRoute =
  DefaultAdminBadgesBadgeIdEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () => DefaultAdminBadgesBadgeIdRoute,
  } as any);

const DefaultBottlesBottleIdReleasesReleaseIdEditRoute =
  DefaultBottlesBottleIdReleasesReleaseIdEditRouteImport.update({
    id: "/$releaseId/edit",
    path: "/$releaseId/edit",
    getParentRoute: () => DefaultBottlesBottleIdReleasesRoute,
  } as any);

const DefaultAdminLocationsCountrySlugRegionsAddRoute =
  DefaultAdminLocationsCountrySlugRegionsAddRouteImport.update({
    id: "/regions/add",
    path: "/regions/add",
    getParentRoute: () => DefaultAdminLocationsCountrySlugRoute,
  } as any);

const DefaultAdminLocationsCountrySlugRegionsRegionSlugRoute =
  DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteImport.update({
    id: "/regions/$regionSlug",
    path: "/regions/$regionSlug",
    getParentRoute: () => DefaultAdminLocationsCountrySlugRoute,
  } as any);

const DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute =
  DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRouteImport.update({
    id: "/edit",
    path: "/edit",
    getParentRoute: () =>
      DefaultAdminLocationsCountrySlugRegionsRegionSlugRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_default": {
      id: "/_default";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof DefaultRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/addBottle": {
      id: "/addBottle";
      path: "/addBottle";
      fullPath: "/addBottle";
      preLoaderRoute: typeof AddBottleRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/addEntity": {
      id: "/addEntity";
      path: "/addEntity";
      fullPath: "/addEntity";
      preLoaderRoute: typeof AddEntityRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/addFlight": {
      id: "/addFlight";
      path: "/addFlight";
      fullPath: "/addFlight";
      preLoaderRoute: typeof AddFlightRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_default/about": {
      id: "/_default/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof DefaultAboutRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/admin": {
      id: "/_default/admin";
      path: "/admin";
      fullPath: "/admin";
      preLoaderRoute: typeof DefaultAdminRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/favorites": {
      id: "/_default/favorites";
      path: "/favorites";
      fullPath: "/favorites";
      preLoaderRoute: typeof DefaultFavoritesRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/friends": {
      id: "/_default/friends";
      path: "/friends";
      fullPath: "/friends";
      preLoaderRoute: typeof DefaultFriendsRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/locations": {
      id: "/_default/locations";
      path: "/locations";
      fullPath: "/locations";
      preLoaderRoute: typeof DefaultLocationsRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/login": {
      id: "/_default/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof DefaultLoginRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/not-found": {
      id: "/_default/not-found";
      path: "/not-found";
      fullPath: "/not-found";
      preLoaderRoute: typeof DefaultNotFoundRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/notifications": {
      id: "/_default/notifications";
      path: "/notifications";
      fullPath: "/notifications";
      preLoaderRoute: typeof DefaultNotificationsRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/password-reset": {
      id: "/_default/password-reset";
      path: "/password-reset";
      fullPath: "/password-reset";
      preLoaderRoute: typeof DefaultPasswordResetRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/register": {
      id: "/_default/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof DefaultRegisterRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/search": {
      id: "/_default/search";
      path: "/search";
      fullPath: "/search";
      preLoaderRoute: typeof DefaultSearchRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/settings": {
      id: "/_default/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof DefaultSettingsRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/updates": {
      id: "/_default/updates";
      path: "/updates";
      fullPath: "/updates";
      preLoaderRoute: typeof DefaultUpdatesRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/verify": {
      id: "/_default/verify";
      path: "/verify";
      fullPath: "/verify";
      preLoaderRoute: typeof DefaultVerifyRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/": {
      id: "/_default/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof DefaultIndexRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/activity/friends": {
      id: "/_default/activity/friends";
      path: "/activity/friends";
      fullPath: "/activity/friends";
      preLoaderRoute: typeof DefaultActivityFriendsRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/activity/local": {
      id: "/_default/activity/local";
      path: "/activity/local";
      fullPath: "/activity/local";
      preLoaderRoute: typeof DefaultActivityLocalRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/admin/badges": {
      id: "/_default/admin/badges";
      path: "/badges";
      fullPath: "/admin/badges";
      preLoaderRoute: typeof DefaultAdminBadgesRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/admin/events": {
      id: "/_default/admin/events";
      path: "/events";
      fullPath: "/admin/events";
      preLoaderRoute: typeof DefaultAdminEventsRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/admin/locations": {
      id: "/_default/admin/locations";
      path: "/locations";
      fullPath: "/admin/locations";
      preLoaderRoute: typeof DefaultAdminLocationsRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/admin/queue": {
      id: "/_default/admin/queue";
      path: "/queue";
      fullPath: "/admin/queue";
      preLoaderRoute: typeof DefaultAdminQueueRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/admin/sites": {
      id: "/_default/admin/sites";
      path: "/sites";
      fullPath: "/admin/sites";
      preLoaderRoute: typeof DefaultAdminSitesRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/admin/tags": {
      id: "/_default/admin/tags";
      path: "/tags";
      fullPath: "/admin/tags";
      preLoaderRoute: typeof DefaultAdminTagsRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/admin/users": {
      id: "/_default/admin/users";
      path: "/users";
      fullPath: "/admin/users";
      preLoaderRoute: typeof DefaultAdminUsersRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/badges/$badgeId": {
      id: "/_default/badges/$badgeId";
      path: "/badges/$badgeId";
      fullPath: "/badges/$badgeId";
      preLoaderRoute: typeof DefaultBadgesBadgeIdRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/bottles/$bottleId": {
      id: "/_default/bottles/$bottleId";
      path: "/bottles/$bottleId";
      fullPath: "/bottles/$bottleId";
      preLoaderRoute: typeof DefaultBottlesBottleIdRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/entities/$entityId": {
      id: "/_default/entities/$entityId";
      path: "/entities/$entityId";
      fullPath: "/entities/$entityId";
      preLoaderRoute: typeof DefaultEntitiesEntityIdRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/flights/$flightId": {
      id: "/_default/flights/$flightId";
      path: "/flights/$flightId";
      fullPath: "/flights/$flightId";
      preLoaderRoute: typeof DefaultFlightsFlightIdRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/locations/$countrySlug": {
      id: "/_default/locations/$countrySlug";
      path: "/$countrySlug";
      fullPath: "/locations/$countrySlug";
      preLoaderRoute: typeof DefaultLocationsCountrySlugRouteImport;
      parentRoute: typeof DefaultLocationsRouteImport;
    };
    "/_default/locations/all-regions": {
      id: "/_default/locations/all-regions";
      path: "/all-regions";
      fullPath: "/locations/all-regions";
      preLoaderRoute: typeof DefaultLocationsAllRegionsRouteImport;
      parentRoute: typeof DefaultLocationsRouteImport;
    };
    "/_default/notifications/all": {
      id: "/_default/notifications/all";
      path: "/all";
      fullPath: "/notifications/all";
      preLoaderRoute: typeof DefaultNotificationsAllRouteImport;
      parentRoute: typeof DefaultNotificationsRouteImport;
    };
    "/_default/tastings/$tastingId": {
      id: "/_default/tastings/$tastingId";
      path: "/tastings/$tastingId";
      fullPath: "/tastings/$tastingId";
      preLoaderRoute: typeof DefaultTastingsTastingIdRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/users/$username": {
      id: "/_default/users/$username";
      path: "/users/$username";
      fullPath: "/users/$username";
      preLoaderRoute: typeof DefaultUsersUsernameRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/bottles_/$bottleId/addRelease": {
      id: "/bottles_/$bottleId/addRelease";
      path: "/bottles/$bottleId/addRelease";
      fullPath: "/bottles/$bottleId/addRelease";
      preLoaderRoute: typeof BottlesBottleIdAddReleaseRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/bottles_/$bottleId/addTasting": {
      id: "/bottles_/$bottleId/addTasting";
      path: "/bottles/$bottleId/addTasting";
      fullPath: "/bottles/$bottleId/addTasting";
      preLoaderRoute: typeof BottlesBottleIdAddTastingRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/entities_/$entityId/edit": {
      id: "/entities_/$entityId/edit";
      path: "/entities/$entityId/edit";
      fullPath: "/entities/$entityId/edit";
      preLoaderRoute: typeof EntitiesEntityIdEditRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/entities_/$entityId/merge": {
      id: "/entities_/$entityId/merge";
      path: "/entities/$entityId/merge";
      fullPath: "/entities/$entityId/merge";
      preLoaderRoute: typeof EntitiesEntityIdMergeRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_default/admin/": {
      id: "/_default/admin/";
      path: "/";
      fullPath: "/admin/";
      preLoaderRoute: typeof DefaultAdminIndexRouteImport;
      parentRoute: typeof DefaultAdminRouteImport;
    };
    "/_default/bottlers/": {
      id: "/_default/bottlers/";
      path: "/bottlers";
      fullPath: "/bottlers";
      preLoaderRoute: typeof DefaultBottlersIndexRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/bottles/": {
      id: "/_default/bottles/";
      path: "/bottles";
      fullPath: "/bottles";
      preLoaderRoute: typeof DefaultBottlesIndexRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/brands/": {
      id: "/_default/brands/";
      path: "/brands";
      fullPath: "/brands";
      preLoaderRoute: typeof DefaultBrandsIndexRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/distillers/": {
      id: "/_default/distillers/";
      path: "/distillers";
      fullPath: "/distillers";
      preLoaderRoute: typeof DefaultDistillersIndexRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/flights/": {
      id: "/_default/flights/";
      path: "/flights";
      fullPath: "/flights";
      preLoaderRoute: typeof DefaultFlightsIndexRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/tastings/": {
      id: "/_default/tastings/";
      path: "/tastings";
      fullPath: "/tastings";
      preLoaderRoute: typeof DefaultTastingsIndexRouteImport;
      parentRoute: typeof DefaultRouteImport;
    };
    "/_default/admin/badges/$badgeId": {
      id: "/_default/admin/badges/$badgeId";
      path: "/$badgeId";
      fullPath: "/admin/badges/$badgeId";
      preLoaderRoute: typeof DefaultAdminBadgesBadgeIdRouteImport;
      parentRoute: typeof DefaultAdminBadgesRouteImport;
    };
    "/_default/admin/badges/add": {
      id: "/_default/admin/badges/add";
      path: "/add";
      fullPath: "/admin/badges/add";
      preLoaderRoute: typeof DefaultAdminBadgesAddRouteImport;
      parentRoute: typeof DefaultAdminBadgesRouteImport;
    };
    "/_default/admin/events/$eventId": {
      id: "/_default/admin/events/$eventId";
      path: "/$eventId";
      fullPath: "/admin/events/$eventId";
      preLoaderRoute: typeof DefaultAdminEventsEventIdRouteImport;
      parentRoute: typeof DefaultAdminEventsRouteImport;
    };
    "/_default/admin/events/add": {
      id: "/_default/admin/events/add";
      path: "/add";
      fullPath: "/admin/events/add";
      preLoaderRoute: typeof DefaultAdminEventsAddRouteImport;
      parentRoute: typeof DefaultAdminEventsRouteImport;
    };
    "/_default/admin/locations/$countrySlug": {
      id: "/_default/admin/locations/$countrySlug";
      path: "/$countrySlug";
      fullPath: "/admin/locations/$countrySlug";
      preLoaderRoute: typeof DefaultAdminLocationsCountrySlugRouteImport;
      parentRoute: typeof DefaultAdminLocationsRouteImport;
    };
    "/_default/admin/sites/$siteId": {
      id: "/_default/admin/sites/$siteId";
      path: "/$siteId";
      fullPath: "/admin/sites/$siteId";
      preLoaderRoute: typeof DefaultAdminSitesSiteIdRouteImport;
      parentRoute: typeof DefaultAdminSitesRouteImport;
    };
    "/_default/admin/sites/add": {
      id: "/_default/admin/sites/add";
      path: "/add";
      fullPath: "/admin/sites/add";
      preLoaderRoute: typeof DefaultAdminSitesAddRouteImport;
      parentRoute: typeof DefaultAdminSitesRouteImport;
    };
    "/_default/admin/tags/$tagId": {
      id: "/_default/admin/tags/$tagId";
      path: "/$tagId";
      fullPath: "/admin/tags/$tagId";
      preLoaderRoute: typeof DefaultAdminTagsTagIdRouteImport;
      parentRoute: typeof DefaultAdminTagsRouteImport;
    };
    "/_default/admin/tags/add": {
      id: "/_default/admin/tags/add";
      path: "/add";
      fullPath: "/admin/tags/add";
      preLoaderRoute: typeof DefaultAdminTagsAddRouteImport;
      parentRoute: typeof DefaultAdminTagsRouteImport;
    };
    "/_default/bottles/$bottleId/aliases": {
      id: "/_default/bottles/$bottleId/aliases";
      path: "/aliases";
      fullPath: "/bottles/$bottleId/aliases";
      preLoaderRoute: typeof DefaultBottlesBottleIdAliasesRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/bottles/$bottleId/edit": {
      id: "/_default/bottles/$bottleId/edit";
      path: "/edit";
      fullPath: "/bottles/$bottleId/edit";
      preLoaderRoute: typeof DefaultBottlesBottleIdEditRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/bottles/$bottleId/merge": {
      id: "/_default/bottles/$bottleId/merge";
      path: "/merge";
      fullPath: "/bottles/$bottleId/merge";
      preLoaderRoute: typeof DefaultBottlesBottleIdMergeRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/bottles/$bottleId/prices": {
      id: "/_default/bottles/$bottleId/prices";
      path: "/prices";
      fullPath: "/bottles/$bottleId/prices";
      preLoaderRoute: typeof DefaultBottlesBottleIdPricesRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/bottles/$bottleId/releases": {
      id: "/_default/bottles/$bottleId/releases";
      path: "/releases";
      fullPath: "/bottles/$bottleId/releases";
      preLoaderRoute: typeof DefaultBottlesBottleIdReleasesRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/bottles/$bottleId/similar": {
      id: "/_default/bottles/$bottleId/similar";
      path: "/similar";
      fullPath: "/bottles/$bottleId/similar";
      preLoaderRoute: typeof DefaultBottlesBottleIdSimilarRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/bottles/$bottleId/tastings": {
      id: "/_default/bottles/$bottleId/tastings";
      path: "/tastings";
      fullPath: "/bottles/$bottleId/tastings";
      preLoaderRoute: typeof DefaultBottlesBottleIdTastingsRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/entities/$entityId/aliases": {
      id: "/_default/entities/$entityId/aliases";
      path: "/aliases";
      fullPath: "/entities/$entityId/aliases";
      preLoaderRoute: typeof DefaultEntitiesEntityIdAliasesRouteImport;
      parentRoute: typeof DefaultEntitiesEntityIdRouteImport;
    };
    "/_default/entities/$entityId/bottles": {
      id: "/_default/entities/$entityId/bottles";
      path: "/bottles";
      fullPath: "/entities/$entityId/bottles";
      preLoaderRoute: typeof DefaultEntitiesEntityIdBottlesRouteImport;
      parentRoute: typeof DefaultEntitiesEntityIdRouteImport;
    };
    "/_default/entities/$entityId/codes": {
      id: "/_default/entities/$entityId/codes";
      path: "/codes";
      fullPath: "/entities/$entityId/codes";
      preLoaderRoute: typeof DefaultEntitiesEntityIdCodesRouteImport;
      parentRoute: typeof DefaultEntitiesEntityIdRouteImport;
    };
    "/_default/entities/$entityId/tastings": {
      id: "/_default/entities/$entityId/tastings";
      path: "/tastings";
      fullPath: "/entities/$entityId/tastings";
      preLoaderRoute: typeof DefaultEntitiesEntityIdTastingsRouteImport;
      parentRoute: typeof DefaultEntitiesEntityIdRouteImport;
    };
    "/_default/flights/$flightId/edit": {
      id: "/_default/flights/$flightId/edit";
      path: "/edit";
      fullPath: "/flights/$flightId/edit";
      preLoaderRoute: typeof DefaultFlightsFlightIdEditRouteImport;
      parentRoute: typeof DefaultFlightsFlightIdRouteImport;
    };
    "/_default/flights/$flightId/overlay": {
      id: "/_default/flights/$flightId/overlay";
      path: "/overlay";
      fullPath: "/flights/$flightId/overlay";
      preLoaderRoute: typeof DefaultFlightsFlightIdOverlayRouteImport;
      parentRoute: typeof DefaultFlightsFlightIdRouteImport;
    };
    "/_default/locations/$countrySlug/regions": {
      id: "/_default/locations/$countrySlug/regions";
      path: "/regions";
      fullPath: "/locations/$countrySlug/regions";
      preLoaderRoute: typeof DefaultLocationsCountrySlugRegionsRouteImport;
      parentRoute: typeof DefaultLocationsCountrySlugRouteImport;
    };
    "/_default/tastings/$tastingId/edit": {
      id: "/_default/tastings/$tastingId/edit";
      path: "/edit";
      fullPath: "/tastings/$tastingId/edit";
      preLoaderRoute: typeof DefaultTastingsTastingIdEditRouteImport;
      parentRoute: typeof DefaultTastingsTastingIdRouteImport;
    };
    "/_default/users/$username/favorites": {
      id: "/_default/users/$username/favorites";
      path: "/favorites";
      fullPath: "/users/$username/favorites";
      preLoaderRoute: typeof DefaultUsersUsernameFavoritesRouteImport;
      parentRoute: typeof DefaultUsersUsernameRouteImport;
    };
    "/_default/bottles/$bottleId/": {
      id: "/_default/bottles/$bottleId/";
      path: "/";
      fullPath: "/bottles/$bottleId/";
      preLoaderRoute: typeof DefaultBottlesBottleIdIndexRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdRouteImport;
    };
    "/_default/entities/$entityId/": {
      id: "/_default/entities/$entityId/";
      path: "/";
      fullPath: "/entities/$entityId/";
      preLoaderRoute: typeof DefaultEntitiesEntityIdIndexRouteImport;
      parentRoute: typeof DefaultEntitiesEntityIdRouteImport;
    };
    "/_default/locations/$countrySlug/": {
      id: "/_default/locations/$countrySlug/";
      path: "/";
      fullPath: "/locations/$countrySlug/";
      preLoaderRoute: typeof DefaultLocationsCountrySlugIndexRouteImport;
      parentRoute: typeof DefaultLocationsCountrySlugRouteImport;
    };
    "/_default/users/$username/": {
      id: "/_default/users/$username/";
      path: "/";
      fullPath: "/users/$username/";
      preLoaderRoute: typeof DefaultUsersUsernameIndexRouteImport;
      parentRoute: typeof DefaultUsersUsernameRouteImport;
    };
    "/_default/admin/badges/$badgeId/edit": {
      id: "/_default/admin/badges/$badgeId/edit";
      path: "/edit";
      fullPath: "/admin/badges/$badgeId/edit";
      preLoaderRoute: typeof DefaultAdminBadgesBadgeIdEditRouteImport;
      parentRoute: typeof DefaultAdminBadgesBadgeIdRouteImport;
    };
    "/_default/admin/events/$eventId/edit": {
      id: "/_default/admin/events/$eventId/edit";
      path: "/edit";
      fullPath: "/admin/events/$eventId/edit";
      preLoaderRoute: typeof DefaultAdminEventsEventIdEditRouteImport;
      parentRoute: typeof DefaultAdminEventsEventIdRouteImport;
    };
    "/_default/admin/locations/$countrySlug/edit": {
      id: "/_default/admin/locations/$countrySlug/edit";
      path: "/edit";
      fullPath: "/admin/locations/$countrySlug/edit";
      preLoaderRoute: typeof DefaultAdminLocationsCountrySlugEditRouteImport;
      parentRoute: typeof DefaultAdminLocationsCountrySlugRouteImport;
    };
    "/_default/admin/sites/$siteId/edit": {
      id: "/_default/admin/sites/$siteId/edit";
      path: "/edit";
      fullPath: "/admin/sites/$siteId/edit";
      preLoaderRoute: typeof DefaultAdminSitesSiteIdEditRouteImport;
      parentRoute: typeof DefaultAdminSitesSiteIdRouteImport;
    };
    "/_default/admin/sites/$siteId/reviews": {
      id: "/_default/admin/sites/$siteId/reviews";
      path: "/reviews";
      fullPath: "/admin/sites/$siteId/reviews";
      preLoaderRoute: typeof DefaultAdminSitesSiteIdReviewsRouteImport;
      parentRoute: typeof DefaultAdminSitesSiteIdRouteImport;
    };
    "/_default/admin/tags/$tagId/edit": {
      id: "/_default/admin/tags/$tagId/edit";
      path: "/edit";
      fullPath: "/admin/tags/$tagId/edit";
      preLoaderRoute: typeof DefaultAdminTagsTagIdEditRouteImport;
      parentRoute: typeof DefaultAdminTagsTagIdRouteImport;
    };
    "/_default/locations/$countrySlug/regions/$regionSlug": {
      id: "/_default/locations/$countrySlug/regions/$regionSlug";
      path: "/$regionSlug";
      fullPath: "/locations/$countrySlug/regions/$regionSlug";
      preLoaderRoute: typeof DefaultLocationsCountrySlugRegionsRegionSlugRouteImport;
      parentRoute: typeof DefaultLocationsCountrySlugRegionsRouteImport;
    };
    "/_default/admin/locations/$countrySlug/": {
      id: "/_default/admin/locations/$countrySlug/";
      path: "/";
      fullPath: "/admin/locations/$countrySlug/";
      preLoaderRoute: typeof DefaultAdminLocationsCountrySlugIndexRouteImport;
      parentRoute: typeof DefaultAdminLocationsCountrySlugRouteImport;
    };
    "/_default/admin/sites/$siteId/": {
      id: "/_default/admin/sites/$siteId/";
      path: "/";
      fullPath: "/admin/sites/$siteId/";
      preLoaderRoute: typeof DefaultAdminSitesSiteIdIndexRouteImport;
      parentRoute: typeof DefaultAdminSitesSiteIdRouteImport;
    };
    "/_default/admin/locations/$countrySlug/regions/$regionSlug": {
      id: "/_default/admin/locations/$countrySlug/regions/$regionSlug";
      path: "/regions/$regionSlug";
      fullPath: "/admin/locations/$countrySlug/regions/$regionSlug";
      preLoaderRoute: typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteImport;
      parentRoute: typeof DefaultAdminLocationsCountrySlugRouteImport;
    };
    "/_default/admin/locations/$countrySlug/regions/add": {
      id: "/_default/admin/locations/$countrySlug/regions/add";
      path: "/regions/add";
      fullPath: "/admin/locations/$countrySlug/regions/add";
      preLoaderRoute: typeof DefaultAdminLocationsCountrySlugRegionsAddRouteImport;
      parentRoute: typeof DefaultAdminLocationsCountrySlugRouteImport;
    };
    "/_default/bottles/$bottleId/releases/$releaseId/edit": {
      id: "/_default/bottles/$bottleId/releases/$releaseId/edit";
      path: "/$releaseId/edit";
      fullPath: "/bottles/$bottleId/releases/$releaseId/edit";
      preLoaderRoute: typeof DefaultBottlesBottleIdReleasesReleaseIdEditRouteImport;
      parentRoute: typeof DefaultBottlesBottleIdReleasesRouteImport;
    };
    "/_default/admin/locations/$countrySlug/regions/$regionSlug/edit": {
      id: "/_default/admin/locations/$countrySlug/regions/$regionSlug/edit";
      path: "/edit";
      fullPath: "/admin/locations/$countrySlug/regions/$regionSlug/edit";
      preLoaderRoute: typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRouteImport;
      parentRoute: typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteImport;
    };
  }
}

// Create and export the route tree

interface DefaultAdminBadgesBadgeIdRouteChildren {
  DefaultAdminBadgesBadgeIdEditRoute: typeof DefaultAdminBadgesBadgeIdEditRoute;
}

const DefaultAdminBadgesBadgeIdRouteChildren: DefaultAdminBadgesBadgeIdRouteChildren =
  {
    DefaultAdminBadgesBadgeIdEditRoute: DefaultAdminBadgesBadgeIdEditRoute,
  };

const DefaultAdminBadgesBadgeIdRouteWithChildren =
  DefaultAdminBadgesBadgeIdRoute._addFileChildren(
    DefaultAdminBadgesBadgeIdRouteChildren
  );

interface DefaultAdminBadgesRouteChildren {
  DefaultAdminBadgesBadgeIdRoute: typeof DefaultAdminBadgesBadgeIdRouteWithChildren;
  DefaultAdminBadgesAddRoute: typeof DefaultAdminBadgesAddRoute;
}

const DefaultAdminBadgesRouteChildren: DefaultAdminBadgesRouteChildren = {
  DefaultAdminBadgesBadgeIdRoute: DefaultAdminBadgesBadgeIdRouteWithChildren,
  DefaultAdminBadgesAddRoute: DefaultAdminBadgesAddRoute,
};

const DefaultAdminBadgesRouteWithChildren =
  DefaultAdminBadgesRoute._addFileChildren(DefaultAdminBadgesRouteChildren);

interface DefaultAdminEventsEventIdRouteChildren {
  DefaultAdminEventsEventIdEditRoute: typeof DefaultAdminEventsEventIdEditRoute;
}

const DefaultAdminEventsEventIdRouteChildren: DefaultAdminEventsEventIdRouteChildren =
  {
    DefaultAdminEventsEventIdEditRoute: DefaultAdminEventsEventIdEditRoute,
  };

const DefaultAdminEventsEventIdRouteWithChildren =
  DefaultAdminEventsEventIdRoute._addFileChildren(
    DefaultAdminEventsEventIdRouteChildren
  );

interface DefaultAdminEventsRouteChildren {
  DefaultAdminEventsEventIdRoute: typeof DefaultAdminEventsEventIdRouteWithChildren;
  DefaultAdminEventsAddRoute: typeof DefaultAdminEventsAddRoute;
}

const DefaultAdminEventsRouteChildren: DefaultAdminEventsRouteChildren = {
  DefaultAdminEventsEventIdRoute: DefaultAdminEventsEventIdRouteWithChildren,
  DefaultAdminEventsAddRoute: DefaultAdminEventsAddRoute,
};

const DefaultAdminEventsRouteWithChildren =
  DefaultAdminEventsRoute._addFileChildren(DefaultAdminEventsRouteChildren);

interface DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteChildren {
  DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute: typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

const DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteChildren: DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteChildren =
  {
    DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute:
      DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute,
  };

const DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren =
  DefaultAdminLocationsCountrySlugRegionsRegionSlugRoute._addFileChildren(
    DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteChildren
  );

interface DefaultAdminLocationsCountrySlugRouteChildren {
  DefaultAdminLocationsCountrySlugEditRoute: typeof DefaultAdminLocationsCountrySlugEditRoute;
  DefaultAdminLocationsCountrySlugIndexRoute: typeof DefaultAdminLocationsCountrySlugIndexRoute;
  DefaultAdminLocationsCountrySlugRegionsRegionSlugRoute: typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  DefaultAdminLocationsCountrySlugRegionsAddRoute: typeof DefaultAdminLocationsCountrySlugRegionsAddRoute;
}

const DefaultAdminLocationsCountrySlugRouteChildren: DefaultAdminLocationsCountrySlugRouteChildren =
  {
    DefaultAdminLocationsCountrySlugEditRoute:
      DefaultAdminLocationsCountrySlugEditRoute,
    DefaultAdminLocationsCountrySlugIndexRoute:
      DefaultAdminLocationsCountrySlugIndexRoute,
    DefaultAdminLocationsCountrySlugRegionsRegionSlugRoute:
      DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren,
    DefaultAdminLocationsCountrySlugRegionsAddRoute:
      DefaultAdminLocationsCountrySlugRegionsAddRoute,
  };

const DefaultAdminLocationsCountrySlugRouteWithChildren =
  DefaultAdminLocationsCountrySlugRoute._addFileChildren(
    DefaultAdminLocationsCountrySlugRouteChildren
  );

interface DefaultAdminLocationsRouteChildren {
  DefaultAdminLocationsCountrySlugRoute: typeof DefaultAdminLocationsCountrySlugRouteWithChildren;
}

const DefaultAdminLocationsRouteChildren: DefaultAdminLocationsRouteChildren = {
  DefaultAdminLocationsCountrySlugRoute:
    DefaultAdminLocationsCountrySlugRouteWithChildren,
};

const DefaultAdminLocationsRouteWithChildren =
  DefaultAdminLocationsRoute._addFileChildren(
    DefaultAdminLocationsRouteChildren
  );

interface DefaultAdminSitesSiteIdRouteChildren {
  DefaultAdminSitesSiteIdEditRoute: typeof DefaultAdminSitesSiteIdEditRoute;
  DefaultAdminSitesSiteIdReviewsRoute: typeof DefaultAdminSitesSiteIdReviewsRoute;
  DefaultAdminSitesSiteIdIndexRoute: typeof DefaultAdminSitesSiteIdIndexRoute;
}

const DefaultAdminSitesSiteIdRouteChildren: DefaultAdminSitesSiteIdRouteChildren =
  {
    DefaultAdminSitesSiteIdEditRoute: DefaultAdminSitesSiteIdEditRoute,
    DefaultAdminSitesSiteIdReviewsRoute: DefaultAdminSitesSiteIdReviewsRoute,
    DefaultAdminSitesSiteIdIndexRoute: DefaultAdminSitesSiteIdIndexRoute,
  };

const DefaultAdminSitesSiteIdRouteWithChildren =
  DefaultAdminSitesSiteIdRoute._addFileChildren(
    DefaultAdminSitesSiteIdRouteChildren
  );

interface DefaultAdminSitesRouteChildren {
  DefaultAdminSitesSiteIdRoute: typeof DefaultAdminSitesSiteIdRouteWithChildren;
  DefaultAdminSitesAddRoute: typeof DefaultAdminSitesAddRoute;
}

const DefaultAdminSitesRouteChildren: DefaultAdminSitesRouteChildren = {
  DefaultAdminSitesSiteIdRoute: DefaultAdminSitesSiteIdRouteWithChildren,
  DefaultAdminSitesAddRoute: DefaultAdminSitesAddRoute,
};

const DefaultAdminSitesRouteWithChildren =
  DefaultAdminSitesRoute._addFileChildren(DefaultAdminSitesRouteChildren);

interface DefaultAdminTagsTagIdRouteChildren {
  DefaultAdminTagsTagIdEditRoute: typeof DefaultAdminTagsTagIdEditRoute;
}

const DefaultAdminTagsTagIdRouteChildren: DefaultAdminTagsTagIdRouteChildren = {
  DefaultAdminTagsTagIdEditRoute: DefaultAdminTagsTagIdEditRoute,
};

const DefaultAdminTagsTagIdRouteWithChildren =
  DefaultAdminTagsTagIdRoute._addFileChildren(
    DefaultAdminTagsTagIdRouteChildren
  );

interface DefaultAdminTagsRouteChildren {
  DefaultAdminTagsTagIdRoute: typeof DefaultAdminTagsTagIdRouteWithChildren;
  DefaultAdminTagsAddRoute: typeof DefaultAdminTagsAddRoute;
}

const DefaultAdminTagsRouteChildren: DefaultAdminTagsRouteChildren = {
  DefaultAdminTagsTagIdRoute: DefaultAdminTagsTagIdRouteWithChildren,
  DefaultAdminTagsAddRoute: DefaultAdminTagsAddRoute,
};

const DefaultAdminTagsRouteWithChildren =
  DefaultAdminTagsRoute._addFileChildren(DefaultAdminTagsRouteChildren);

interface DefaultAdminRouteChildren {
  DefaultAdminBadgesRoute: typeof DefaultAdminBadgesRouteWithChildren;
  DefaultAdminEventsRoute: typeof DefaultAdminEventsRouteWithChildren;
  DefaultAdminLocationsRoute: typeof DefaultAdminLocationsRouteWithChildren;
  DefaultAdminQueueRoute: typeof DefaultAdminQueueRoute;
  DefaultAdminSitesRoute: typeof DefaultAdminSitesRouteWithChildren;
  DefaultAdminTagsRoute: typeof DefaultAdminTagsRouteWithChildren;
  DefaultAdminUsersRoute: typeof DefaultAdminUsersRoute;
  DefaultAdminIndexRoute: typeof DefaultAdminIndexRoute;
}

const DefaultAdminRouteChildren: DefaultAdminRouteChildren = {
  DefaultAdminBadgesRoute: DefaultAdminBadgesRouteWithChildren,
  DefaultAdminEventsRoute: DefaultAdminEventsRouteWithChildren,
  DefaultAdminLocationsRoute: DefaultAdminLocationsRouteWithChildren,
  DefaultAdminQueueRoute: DefaultAdminQueueRoute,
  DefaultAdminSitesRoute: DefaultAdminSitesRouteWithChildren,
  DefaultAdminTagsRoute: DefaultAdminTagsRouteWithChildren,
  DefaultAdminUsersRoute: DefaultAdminUsersRoute,
  DefaultAdminIndexRoute: DefaultAdminIndexRoute,
};

const DefaultAdminRouteWithChildren = DefaultAdminRoute._addFileChildren(
  DefaultAdminRouteChildren
);

interface DefaultLocationsCountrySlugRegionsRouteChildren {
  DefaultLocationsCountrySlugRegionsRegionSlugRoute: typeof DefaultLocationsCountrySlugRegionsRegionSlugRoute;
}

const DefaultLocationsCountrySlugRegionsRouteChildren: DefaultLocationsCountrySlugRegionsRouteChildren =
  {
    DefaultLocationsCountrySlugRegionsRegionSlugRoute:
      DefaultLocationsCountrySlugRegionsRegionSlugRoute,
  };

const DefaultLocationsCountrySlugRegionsRouteWithChildren =
  DefaultLocationsCountrySlugRegionsRoute._addFileChildren(
    DefaultLocationsCountrySlugRegionsRouteChildren
  );

interface DefaultLocationsCountrySlugRouteChildren {
  DefaultLocationsCountrySlugRegionsRoute: typeof DefaultLocationsCountrySlugRegionsRouteWithChildren;
  DefaultLocationsCountrySlugIndexRoute: typeof DefaultLocationsCountrySlugIndexRoute;
}

const DefaultLocationsCountrySlugRouteChildren: DefaultLocationsCountrySlugRouteChildren =
  {
    DefaultLocationsCountrySlugRegionsRoute:
      DefaultLocationsCountrySlugRegionsRouteWithChildren,
    DefaultLocationsCountrySlugIndexRoute:
      DefaultLocationsCountrySlugIndexRoute,
  };

const DefaultLocationsCountrySlugRouteWithChildren =
  DefaultLocationsCountrySlugRoute._addFileChildren(
    DefaultLocationsCountrySlugRouteChildren
  );

interface DefaultLocationsRouteChildren {
  DefaultLocationsCountrySlugRoute: typeof DefaultLocationsCountrySlugRouteWithChildren;
  DefaultLocationsAllRegionsRoute: typeof DefaultLocationsAllRegionsRoute;
}

const DefaultLocationsRouteChildren: DefaultLocationsRouteChildren = {
  DefaultLocationsCountrySlugRoute:
    DefaultLocationsCountrySlugRouteWithChildren,
  DefaultLocationsAllRegionsRoute: DefaultLocationsAllRegionsRoute,
};

const DefaultLocationsRouteWithChildren =
  DefaultLocationsRoute._addFileChildren(DefaultLocationsRouteChildren);

interface DefaultNotificationsRouteChildren {
  DefaultNotificationsAllRoute: typeof DefaultNotificationsAllRoute;
}

const DefaultNotificationsRouteChildren: DefaultNotificationsRouteChildren = {
  DefaultNotificationsAllRoute: DefaultNotificationsAllRoute,
};

const DefaultNotificationsRouteWithChildren =
  DefaultNotificationsRoute._addFileChildren(DefaultNotificationsRouteChildren);

interface DefaultBottlesBottleIdReleasesRouteChildren {
  DefaultBottlesBottleIdReleasesReleaseIdEditRoute: typeof DefaultBottlesBottleIdReleasesReleaseIdEditRoute;
}

const DefaultBottlesBottleIdReleasesRouteChildren: DefaultBottlesBottleIdReleasesRouteChildren =
  {
    DefaultBottlesBottleIdReleasesReleaseIdEditRoute:
      DefaultBottlesBottleIdReleasesReleaseIdEditRoute,
  };

const DefaultBottlesBottleIdReleasesRouteWithChildren =
  DefaultBottlesBottleIdReleasesRoute._addFileChildren(
    DefaultBottlesBottleIdReleasesRouteChildren
  );

interface DefaultBottlesBottleIdRouteChildren {
  DefaultBottlesBottleIdAliasesRoute: typeof DefaultBottlesBottleIdAliasesRoute;
  DefaultBottlesBottleIdEditRoute: typeof DefaultBottlesBottleIdEditRoute;
  DefaultBottlesBottleIdMergeRoute: typeof DefaultBottlesBottleIdMergeRoute;
  DefaultBottlesBottleIdPricesRoute: typeof DefaultBottlesBottleIdPricesRoute;
  DefaultBottlesBottleIdReleasesRoute: typeof DefaultBottlesBottleIdReleasesRouteWithChildren;
  DefaultBottlesBottleIdSimilarRoute: typeof DefaultBottlesBottleIdSimilarRoute;
  DefaultBottlesBottleIdTastingsRoute: typeof DefaultBottlesBottleIdTastingsRoute;
  DefaultBottlesBottleIdIndexRoute: typeof DefaultBottlesBottleIdIndexRoute;
}

const DefaultBottlesBottleIdRouteChildren: DefaultBottlesBottleIdRouteChildren =
  {
    DefaultBottlesBottleIdAliasesRoute: DefaultBottlesBottleIdAliasesRoute,
    DefaultBottlesBottleIdEditRoute: DefaultBottlesBottleIdEditRoute,
    DefaultBottlesBottleIdMergeRoute: DefaultBottlesBottleIdMergeRoute,
    DefaultBottlesBottleIdPricesRoute: DefaultBottlesBottleIdPricesRoute,
    DefaultBottlesBottleIdReleasesRoute:
      DefaultBottlesBottleIdReleasesRouteWithChildren,
    DefaultBottlesBottleIdSimilarRoute: DefaultBottlesBottleIdSimilarRoute,
    DefaultBottlesBottleIdTastingsRoute: DefaultBottlesBottleIdTastingsRoute,
    DefaultBottlesBottleIdIndexRoute: DefaultBottlesBottleIdIndexRoute,
  };

const DefaultBottlesBottleIdRouteWithChildren =
  DefaultBottlesBottleIdRoute._addFileChildren(
    DefaultBottlesBottleIdRouteChildren
  );

interface DefaultEntitiesEntityIdRouteChildren {
  DefaultEntitiesEntityIdAliasesRoute: typeof DefaultEntitiesEntityIdAliasesRoute;
  DefaultEntitiesEntityIdBottlesRoute: typeof DefaultEntitiesEntityIdBottlesRoute;
  DefaultEntitiesEntityIdCodesRoute: typeof DefaultEntitiesEntityIdCodesRoute;
  DefaultEntitiesEntityIdTastingsRoute: typeof DefaultEntitiesEntityIdTastingsRoute;
  DefaultEntitiesEntityIdIndexRoute: typeof DefaultEntitiesEntityIdIndexRoute;
}

const DefaultEntitiesEntityIdRouteChildren: DefaultEntitiesEntityIdRouteChildren =
  {
    DefaultEntitiesEntityIdAliasesRoute: DefaultEntitiesEntityIdAliasesRoute,
    DefaultEntitiesEntityIdBottlesRoute: DefaultEntitiesEntityIdBottlesRoute,
    DefaultEntitiesEntityIdCodesRoute: DefaultEntitiesEntityIdCodesRoute,
    DefaultEntitiesEntityIdTastingsRoute: DefaultEntitiesEntityIdTastingsRoute,
    DefaultEntitiesEntityIdIndexRoute: DefaultEntitiesEntityIdIndexRoute,
  };

const DefaultEntitiesEntityIdRouteWithChildren =
  DefaultEntitiesEntityIdRoute._addFileChildren(
    DefaultEntitiesEntityIdRouteChildren
  );

interface DefaultFlightsFlightIdRouteChildren {
  DefaultFlightsFlightIdEditRoute: typeof DefaultFlightsFlightIdEditRoute;
  DefaultFlightsFlightIdOverlayRoute: typeof DefaultFlightsFlightIdOverlayRoute;
}

const DefaultFlightsFlightIdRouteChildren: DefaultFlightsFlightIdRouteChildren =
  {
    DefaultFlightsFlightIdEditRoute: DefaultFlightsFlightIdEditRoute,
    DefaultFlightsFlightIdOverlayRoute: DefaultFlightsFlightIdOverlayRoute,
  };

const DefaultFlightsFlightIdRouteWithChildren =
  DefaultFlightsFlightIdRoute._addFileChildren(
    DefaultFlightsFlightIdRouteChildren
  );

interface DefaultTastingsTastingIdRouteChildren {
  DefaultTastingsTastingIdEditRoute: typeof DefaultTastingsTastingIdEditRoute;
}

const DefaultTastingsTastingIdRouteChildren: DefaultTastingsTastingIdRouteChildren =
  {
    DefaultTastingsTastingIdEditRoute: DefaultTastingsTastingIdEditRoute,
  };

const DefaultTastingsTastingIdRouteWithChildren =
  DefaultTastingsTastingIdRoute._addFileChildren(
    DefaultTastingsTastingIdRouteChildren
  );

interface DefaultUsersUsernameRouteChildren {
  DefaultUsersUsernameFavoritesRoute: typeof DefaultUsersUsernameFavoritesRoute;
  DefaultUsersUsernameIndexRoute: typeof DefaultUsersUsernameIndexRoute;
}

const DefaultUsersUsernameRouteChildren: DefaultUsersUsernameRouteChildren = {
  DefaultUsersUsernameFavoritesRoute: DefaultUsersUsernameFavoritesRoute,
  DefaultUsersUsernameIndexRoute: DefaultUsersUsernameIndexRoute,
};

const DefaultUsersUsernameRouteWithChildren =
  DefaultUsersUsernameRoute._addFileChildren(DefaultUsersUsernameRouteChildren);

interface DefaultRouteChildren {
  DefaultAboutRoute: typeof DefaultAboutRoute;
  DefaultAdminRoute: typeof DefaultAdminRouteWithChildren;
  DefaultFavoritesRoute: typeof DefaultFavoritesRoute;
  DefaultFriendsRoute: typeof DefaultFriendsRoute;
  DefaultLocationsRoute: typeof DefaultLocationsRouteWithChildren;
  DefaultLoginRoute: typeof DefaultLoginRoute;
  DefaultNotFoundRoute: typeof DefaultNotFoundRoute;
  DefaultNotificationsRoute: typeof DefaultNotificationsRouteWithChildren;
  DefaultPasswordResetRoute: typeof DefaultPasswordResetRoute;
  DefaultRegisterRoute: typeof DefaultRegisterRoute;
  DefaultSearchRoute: typeof DefaultSearchRoute;
  DefaultSettingsRoute: typeof DefaultSettingsRoute;
  DefaultUpdatesRoute: typeof DefaultUpdatesRoute;
  DefaultVerifyRoute: typeof DefaultVerifyRoute;
  DefaultIndexRoute: typeof DefaultIndexRoute;
  DefaultActivityFriendsRoute: typeof DefaultActivityFriendsRoute;
  DefaultActivityLocalRoute: typeof DefaultActivityLocalRoute;
  DefaultBadgesBadgeIdRoute: typeof DefaultBadgesBadgeIdRoute;
  DefaultBottlesBottleIdRoute: typeof DefaultBottlesBottleIdRouteWithChildren;
  DefaultEntitiesEntityIdRoute: typeof DefaultEntitiesEntityIdRouteWithChildren;
  DefaultFlightsFlightIdRoute: typeof DefaultFlightsFlightIdRouteWithChildren;
  DefaultTastingsTastingIdRoute: typeof DefaultTastingsTastingIdRouteWithChildren;
  DefaultUsersUsernameRoute: typeof DefaultUsersUsernameRouteWithChildren;
  DefaultBottlersIndexRoute: typeof DefaultBottlersIndexRoute;
  DefaultBottlesIndexRoute: typeof DefaultBottlesIndexRoute;
  DefaultBrandsIndexRoute: typeof DefaultBrandsIndexRoute;
  DefaultDistillersIndexRoute: typeof DefaultDistillersIndexRoute;
  DefaultFlightsIndexRoute: typeof DefaultFlightsIndexRoute;
  DefaultTastingsIndexRoute: typeof DefaultTastingsIndexRoute;
}

const DefaultRouteChildren: DefaultRouteChildren = {
  DefaultAboutRoute: DefaultAboutRoute,
  DefaultAdminRoute: DefaultAdminRouteWithChildren,
  DefaultFavoritesRoute: DefaultFavoritesRoute,
  DefaultFriendsRoute: DefaultFriendsRoute,
  DefaultLocationsRoute: DefaultLocationsRouteWithChildren,
  DefaultLoginRoute: DefaultLoginRoute,
  DefaultNotFoundRoute: DefaultNotFoundRoute,
  DefaultNotificationsRoute: DefaultNotificationsRouteWithChildren,
  DefaultPasswordResetRoute: DefaultPasswordResetRoute,
  DefaultRegisterRoute: DefaultRegisterRoute,
  DefaultSearchRoute: DefaultSearchRoute,
  DefaultSettingsRoute: DefaultSettingsRoute,
  DefaultUpdatesRoute: DefaultUpdatesRoute,
  DefaultVerifyRoute: DefaultVerifyRoute,
  DefaultIndexRoute: DefaultIndexRoute,
  DefaultActivityFriendsRoute: DefaultActivityFriendsRoute,
  DefaultActivityLocalRoute: DefaultActivityLocalRoute,
  DefaultBadgesBadgeIdRoute: DefaultBadgesBadgeIdRoute,
  DefaultBottlesBottleIdRoute: DefaultBottlesBottleIdRouteWithChildren,
  DefaultEntitiesEntityIdRoute: DefaultEntitiesEntityIdRouteWithChildren,
  DefaultFlightsFlightIdRoute: DefaultFlightsFlightIdRouteWithChildren,
  DefaultTastingsTastingIdRoute: DefaultTastingsTastingIdRouteWithChildren,
  DefaultUsersUsernameRoute: DefaultUsersUsernameRouteWithChildren,
  DefaultBottlersIndexRoute: DefaultBottlersIndexRoute,
  DefaultBottlesIndexRoute: DefaultBottlesIndexRoute,
  DefaultBrandsIndexRoute: DefaultBrandsIndexRoute,
  DefaultDistillersIndexRoute: DefaultDistillersIndexRoute,
  DefaultFlightsIndexRoute: DefaultFlightsIndexRoute,
  DefaultTastingsIndexRoute: DefaultTastingsIndexRoute,
};

const DefaultRouteWithChildren =
  DefaultRoute._addFileChildren(DefaultRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof DefaultRouteWithChildren;
  "/addBottle": typeof AddBottleRoute;
  "/addEntity": typeof AddEntityRoute;
  "/addFlight": typeof AddFlightRoute;
  "/about": typeof DefaultAboutRoute;
  "/admin": typeof DefaultAdminRouteWithChildren;
  "/favorites": typeof DefaultFavoritesRoute;
  "/friends": typeof DefaultFriendsRoute;
  "/locations": typeof DefaultLocationsRouteWithChildren;
  "/login": typeof DefaultLoginRoute;
  "/not-found": typeof DefaultNotFoundRoute;
  "/notifications": typeof DefaultNotificationsRouteWithChildren;
  "/password-reset": typeof DefaultPasswordResetRoute;
  "/register": typeof DefaultRegisterRoute;
  "/search": typeof DefaultSearchRoute;
  "/settings": typeof DefaultSettingsRoute;
  "/updates": typeof DefaultUpdatesRoute;
  "/verify": typeof DefaultVerifyRoute;
  "/": typeof DefaultIndexRoute;
  "/activity/friends": typeof DefaultActivityFriendsRoute;
  "/activity/local": typeof DefaultActivityLocalRoute;
  "/admin/badges": typeof DefaultAdminBadgesRouteWithChildren;
  "/admin/events": typeof DefaultAdminEventsRouteWithChildren;
  "/admin/locations": typeof DefaultAdminLocationsRouteWithChildren;
  "/admin/queue": typeof DefaultAdminQueueRoute;
  "/admin/sites": typeof DefaultAdminSitesRouteWithChildren;
  "/admin/tags": typeof DefaultAdminTagsRouteWithChildren;
  "/admin/users": typeof DefaultAdminUsersRoute;
  "/badges/$badgeId": typeof DefaultBadgesBadgeIdRoute;
  "/bottles/$bottleId": typeof DefaultBottlesBottleIdRouteWithChildren;
  "/entities/$entityId": typeof DefaultEntitiesEntityIdRouteWithChildren;
  "/flights/$flightId": typeof DefaultFlightsFlightIdRouteWithChildren;
  "/locations/$countrySlug": typeof DefaultLocationsCountrySlugRouteWithChildren;
  "/locations/all-regions": typeof DefaultLocationsAllRegionsRoute;
  "/notifications/all": typeof DefaultNotificationsAllRoute;
  "/tastings/$tastingId": typeof DefaultTastingsTastingIdRouteWithChildren;
  "/users/$username": typeof DefaultUsersUsernameRouteWithChildren;
  "/bottles/$bottleId/addRelease": typeof BottlesBottleIdAddReleaseRoute;
  "/bottles/$bottleId/addTasting": typeof BottlesBottleIdAddTastingRoute;
  "/entities/$entityId/edit": typeof EntitiesEntityIdEditRoute;
  "/entities/$entityId/merge": typeof EntitiesEntityIdMergeRoute;
  "/admin/": typeof DefaultAdminIndexRoute;
  "/bottlers": typeof DefaultBottlersIndexRoute;
  "/bottles": typeof DefaultBottlesIndexRoute;
  "/brands": typeof DefaultBrandsIndexRoute;
  "/distillers": typeof DefaultDistillersIndexRoute;
  "/flights": typeof DefaultFlightsIndexRoute;
  "/tastings": typeof DefaultTastingsIndexRoute;
  "/admin/badges/$badgeId": typeof DefaultAdminBadgesBadgeIdRouteWithChildren;
  "/admin/badges/add": typeof DefaultAdminBadgesAddRoute;
  "/admin/events/$eventId": typeof DefaultAdminEventsEventIdRouteWithChildren;
  "/admin/events/add": typeof DefaultAdminEventsAddRoute;
  "/admin/locations/$countrySlug": typeof DefaultAdminLocationsCountrySlugRouteWithChildren;
  "/admin/sites/$siteId": typeof DefaultAdminSitesSiteIdRouteWithChildren;
  "/admin/sites/add": typeof DefaultAdminSitesAddRoute;
  "/admin/tags/$tagId": typeof DefaultAdminTagsTagIdRouteWithChildren;
  "/admin/tags/add": typeof DefaultAdminTagsAddRoute;
  "/bottles/$bottleId/aliases": typeof DefaultBottlesBottleIdAliasesRoute;
  "/bottles/$bottleId/edit": typeof DefaultBottlesBottleIdEditRoute;
  "/bottles/$bottleId/merge": typeof DefaultBottlesBottleIdMergeRoute;
  "/bottles/$bottleId/prices": typeof DefaultBottlesBottleIdPricesRoute;
  "/bottles/$bottleId/releases": typeof DefaultBottlesBottleIdReleasesRouteWithChildren;
  "/bottles/$bottleId/similar": typeof DefaultBottlesBottleIdSimilarRoute;
  "/bottles/$bottleId/tastings": typeof DefaultBottlesBottleIdTastingsRoute;
  "/entities/$entityId/aliases": typeof DefaultEntitiesEntityIdAliasesRoute;
  "/entities/$entityId/bottles": typeof DefaultEntitiesEntityIdBottlesRoute;
  "/entities/$entityId/codes": typeof DefaultEntitiesEntityIdCodesRoute;
  "/entities/$entityId/tastings": typeof DefaultEntitiesEntityIdTastingsRoute;
  "/flights/$flightId/edit": typeof DefaultFlightsFlightIdEditRoute;
  "/flights/$flightId/overlay": typeof DefaultFlightsFlightIdOverlayRoute;
  "/locations/$countrySlug/regions": typeof DefaultLocationsCountrySlugRegionsRouteWithChildren;
  "/tastings/$tastingId/edit": typeof DefaultTastingsTastingIdEditRoute;
  "/users/$username/favorites": typeof DefaultUsersUsernameFavoritesRoute;
  "/bottles/$bottleId/": typeof DefaultBottlesBottleIdIndexRoute;
  "/entities/$entityId/": typeof DefaultEntitiesEntityIdIndexRoute;
  "/locations/$countrySlug/": typeof DefaultLocationsCountrySlugIndexRoute;
  "/users/$username/": typeof DefaultUsersUsernameIndexRoute;
  "/admin/badges/$badgeId/edit": typeof DefaultAdminBadgesBadgeIdEditRoute;
  "/admin/events/$eventId/edit": typeof DefaultAdminEventsEventIdEditRoute;
  "/admin/locations/$countrySlug/edit": typeof DefaultAdminLocationsCountrySlugEditRoute;
  "/admin/sites/$siteId/edit": typeof DefaultAdminSitesSiteIdEditRoute;
  "/admin/sites/$siteId/reviews": typeof DefaultAdminSitesSiteIdReviewsRoute;
  "/admin/tags/$tagId/edit": typeof DefaultAdminTagsTagIdEditRoute;
  "/locations/$countrySlug/regions/$regionSlug": typeof DefaultLocationsCountrySlugRegionsRegionSlugRoute;
  "/admin/locations/$countrySlug/": typeof DefaultAdminLocationsCountrySlugIndexRoute;
  "/admin/sites/$siteId/": typeof DefaultAdminSitesSiteIdIndexRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug": typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  "/admin/locations/$countrySlug/regions/add": typeof DefaultAdminLocationsCountrySlugRegionsAddRoute;
  "/bottles/$bottleId/releases/$releaseId/edit": typeof DefaultBottlesBottleIdReleasesReleaseIdEditRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug/edit": typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

export interface FileRoutesByTo {
  "/addBottle": typeof AddBottleRoute;
  "/addEntity": typeof AddEntityRoute;
  "/addFlight": typeof AddFlightRoute;
  "/about": typeof DefaultAboutRoute;
  "/favorites": typeof DefaultFavoritesRoute;
  "/friends": typeof DefaultFriendsRoute;
  "/locations": typeof DefaultLocationsRouteWithChildren;
  "/login": typeof DefaultLoginRoute;
  "/not-found": typeof DefaultNotFoundRoute;
  "/notifications": typeof DefaultNotificationsRouteWithChildren;
  "/password-reset": typeof DefaultPasswordResetRoute;
  "/register": typeof DefaultRegisterRoute;
  "/search": typeof DefaultSearchRoute;
  "/settings": typeof DefaultSettingsRoute;
  "/updates": typeof DefaultUpdatesRoute;
  "/verify": typeof DefaultVerifyRoute;
  "/": typeof DefaultIndexRoute;
  "/activity/friends": typeof DefaultActivityFriendsRoute;
  "/activity/local": typeof DefaultActivityLocalRoute;
  "/admin/badges": typeof DefaultAdminBadgesRouteWithChildren;
  "/admin/events": typeof DefaultAdminEventsRouteWithChildren;
  "/admin/locations": typeof DefaultAdminLocationsRouteWithChildren;
  "/admin/queue": typeof DefaultAdminQueueRoute;
  "/admin/sites": typeof DefaultAdminSitesRouteWithChildren;
  "/admin/tags": typeof DefaultAdminTagsRouteWithChildren;
  "/admin/users": typeof DefaultAdminUsersRoute;
  "/badges/$badgeId": typeof DefaultBadgesBadgeIdRoute;
  "/flights/$flightId": typeof DefaultFlightsFlightIdRouteWithChildren;
  "/locations/all-regions": typeof DefaultLocationsAllRegionsRoute;
  "/notifications/all": typeof DefaultNotificationsAllRoute;
  "/tastings/$tastingId": typeof DefaultTastingsTastingIdRouteWithChildren;
  "/bottles/$bottleId/addRelease": typeof BottlesBottleIdAddReleaseRoute;
  "/bottles/$bottleId/addTasting": typeof BottlesBottleIdAddTastingRoute;
  "/entities/$entityId/edit": typeof EntitiesEntityIdEditRoute;
  "/entities/$entityId/merge": typeof EntitiesEntityIdMergeRoute;
  "/admin": typeof DefaultAdminIndexRoute;
  "/bottlers": typeof DefaultBottlersIndexRoute;
  "/bottles": typeof DefaultBottlesIndexRoute;
  "/brands": typeof DefaultBrandsIndexRoute;
  "/distillers": typeof DefaultDistillersIndexRoute;
  "/flights": typeof DefaultFlightsIndexRoute;
  "/tastings": typeof DefaultTastingsIndexRoute;
  "/admin/badges/$badgeId": typeof DefaultAdminBadgesBadgeIdRouteWithChildren;
  "/admin/badges/add": typeof DefaultAdminBadgesAddRoute;
  "/admin/events/$eventId": typeof DefaultAdminEventsEventIdRouteWithChildren;
  "/admin/events/add": typeof DefaultAdminEventsAddRoute;
  "/admin/sites/add": typeof DefaultAdminSitesAddRoute;
  "/admin/tags/$tagId": typeof DefaultAdminTagsTagIdRouteWithChildren;
  "/admin/tags/add": typeof DefaultAdminTagsAddRoute;
  "/bottles/$bottleId/aliases": typeof DefaultBottlesBottleIdAliasesRoute;
  "/bottles/$bottleId/edit": typeof DefaultBottlesBottleIdEditRoute;
  "/bottles/$bottleId/merge": typeof DefaultBottlesBottleIdMergeRoute;
  "/bottles/$bottleId/prices": typeof DefaultBottlesBottleIdPricesRoute;
  "/bottles/$bottleId/releases": typeof DefaultBottlesBottleIdReleasesRouteWithChildren;
  "/bottles/$bottleId/similar": typeof DefaultBottlesBottleIdSimilarRoute;
  "/bottles/$bottleId/tastings": typeof DefaultBottlesBottleIdTastingsRoute;
  "/entities/$entityId/aliases": typeof DefaultEntitiesEntityIdAliasesRoute;
  "/entities/$entityId/bottles": typeof DefaultEntitiesEntityIdBottlesRoute;
  "/entities/$entityId/codes": typeof DefaultEntitiesEntityIdCodesRoute;
  "/entities/$entityId/tastings": typeof DefaultEntitiesEntityIdTastingsRoute;
  "/flights/$flightId/edit": typeof DefaultFlightsFlightIdEditRoute;
  "/flights/$flightId/overlay": typeof DefaultFlightsFlightIdOverlayRoute;
  "/locations/$countrySlug/regions": typeof DefaultLocationsCountrySlugRegionsRouteWithChildren;
  "/tastings/$tastingId/edit": typeof DefaultTastingsTastingIdEditRoute;
  "/users/$username/favorites": typeof DefaultUsersUsernameFavoritesRoute;
  "/bottles/$bottleId": typeof DefaultBottlesBottleIdIndexRoute;
  "/entities/$entityId": typeof DefaultEntitiesEntityIdIndexRoute;
  "/locations/$countrySlug": typeof DefaultLocationsCountrySlugIndexRoute;
  "/users/$username": typeof DefaultUsersUsernameIndexRoute;
  "/admin/badges/$badgeId/edit": typeof DefaultAdminBadgesBadgeIdEditRoute;
  "/admin/events/$eventId/edit": typeof DefaultAdminEventsEventIdEditRoute;
  "/admin/locations/$countrySlug/edit": typeof DefaultAdminLocationsCountrySlugEditRoute;
  "/admin/sites/$siteId/edit": typeof DefaultAdminSitesSiteIdEditRoute;
  "/admin/sites/$siteId/reviews": typeof DefaultAdminSitesSiteIdReviewsRoute;
  "/admin/tags/$tagId/edit": typeof DefaultAdminTagsTagIdEditRoute;
  "/locations/$countrySlug/regions/$regionSlug": typeof DefaultLocationsCountrySlugRegionsRegionSlugRoute;
  "/admin/locations/$countrySlug": typeof DefaultAdminLocationsCountrySlugIndexRoute;
  "/admin/sites/$siteId": typeof DefaultAdminSitesSiteIdIndexRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug": typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  "/admin/locations/$countrySlug/regions/add": typeof DefaultAdminLocationsCountrySlugRegionsAddRoute;
  "/bottles/$bottleId/releases/$releaseId/edit": typeof DefaultBottlesBottleIdReleasesReleaseIdEditRoute;
  "/admin/locations/$countrySlug/regions/$regionSlug/edit": typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_default": typeof DefaultRouteWithChildren;
  "/addBottle": typeof AddBottleRoute;
  "/addEntity": typeof AddEntityRoute;
  "/addFlight": typeof AddFlightRoute;
  "/_default/about": typeof DefaultAboutRoute;
  "/_default/admin": typeof DefaultAdminRouteWithChildren;
  "/_default/favorites": typeof DefaultFavoritesRoute;
  "/_default/friends": typeof DefaultFriendsRoute;
  "/_default/locations": typeof DefaultLocationsRouteWithChildren;
  "/_default/login": typeof DefaultLoginRoute;
  "/_default/not-found": typeof DefaultNotFoundRoute;
  "/_default/notifications": typeof DefaultNotificationsRouteWithChildren;
  "/_default/password-reset": typeof DefaultPasswordResetRoute;
  "/_default/register": typeof DefaultRegisterRoute;
  "/_default/search": typeof DefaultSearchRoute;
  "/_default/settings": typeof DefaultSettingsRoute;
  "/_default/updates": typeof DefaultUpdatesRoute;
  "/_default/verify": typeof DefaultVerifyRoute;
  "/_default/": typeof DefaultIndexRoute;
  "/_default/activity/friends": typeof DefaultActivityFriendsRoute;
  "/_default/activity/local": typeof DefaultActivityLocalRoute;
  "/_default/admin/badges": typeof DefaultAdminBadgesRouteWithChildren;
  "/_default/admin/events": typeof DefaultAdminEventsRouteWithChildren;
  "/_default/admin/locations": typeof DefaultAdminLocationsRouteWithChildren;
  "/_default/admin/queue": typeof DefaultAdminQueueRoute;
  "/_default/admin/sites": typeof DefaultAdminSitesRouteWithChildren;
  "/_default/admin/tags": typeof DefaultAdminTagsRouteWithChildren;
  "/_default/admin/users": typeof DefaultAdminUsersRoute;
  "/_default/badges/$badgeId": typeof DefaultBadgesBadgeIdRoute;
  "/_default/bottles/$bottleId": typeof DefaultBottlesBottleIdRouteWithChildren;
  "/_default/entities/$entityId": typeof DefaultEntitiesEntityIdRouteWithChildren;
  "/_default/flights/$flightId": typeof DefaultFlightsFlightIdRouteWithChildren;
  "/_default/locations/$countrySlug": typeof DefaultLocationsCountrySlugRouteWithChildren;
  "/_default/locations/all-regions": typeof DefaultLocationsAllRegionsRoute;
  "/_default/notifications/all": typeof DefaultNotificationsAllRoute;
  "/_default/tastings/$tastingId": typeof DefaultTastingsTastingIdRouteWithChildren;
  "/_default/users/$username": typeof DefaultUsersUsernameRouteWithChildren;
  "/bottles_/$bottleId/addRelease": typeof BottlesBottleIdAddReleaseRoute;
  "/bottles_/$bottleId/addTasting": typeof BottlesBottleIdAddTastingRoute;
  "/entities_/$entityId/edit": typeof EntitiesEntityIdEditRoute;
  "/entities_/$entityId/merge": typeof EntitiesEntityIdMergeRoute;
  "/_default/admin/": typeof DefaultAdminIndexRoute;
  "/_default/bottlers/": typeof DefaultBottlersIndexRoute;
  "/_default/bottles/": typeof DefaultBottlesIndexRoute;
  "/_default/brands/": typeof DefaultBrandsIndexRoute;
  "/_default/distillers/": typeof DefaultDistillersIndexRoute;
  "/_default/flights/": typeof DefaultFlightsIndexRoute;
  "/_default/tastings/": typeof DefaultTastingsIndexRoute;
  "/_default/admin/badges/$badgeId": typeof DefaultAdminBadgesBadgeIdRouteWithChildren;
  "/_default/admin/badges/add": typeof DefaultAdminBadgesAddRoute;
  "/_default/admin/events/$eventId": typeof DefaultAdminEventsEventIdRouteWithChildren;
  "/_default/admin/events/add": typeof DefaultAdminEventsAddRoute;
  "/_default/admin/locations/$countrySlug": typeof DefaultAdminLocationsCountrySlugRouteWithChildren;
  "/_default/admin/sites/$siteId": typeof DefaultAdminSitesSiteIdRouteWithChildren;
  "/_default/admin/sites/add": typeof DefaultAdminSitesAddRoute;
  "/_default/admin/tags/$tagId": typeof DefaultAdminTagsTagIdRouteWithChildren;
  "/_default/admin/tags/add": typeof DefaultAdminTagsAddRoute;
  "/_default/bottles/$bottleId/aliases": typeof DefaultBottlesBottleIdAliasesRoute;
  "/_default/bottles/$bottleId/edit": typeof DefaultBottlesBottleIdEditRoute;
  "/_default/bottles/$bottleId/merge": typeof DefaultBottlesBottleIdMergeRoute;
  "/_default/bottles/$bottleId/prices": typeof DefaultBottlesBottleIdPricesRoute;
  "/_default/bottles/$bottleId/releases": typeof DefaultBottlesBottleIdReleasesRouteWithChildren;
  "/_default/bottles/$bottleId/similar": typeof DefaultBottlesBottleIdSimilarRoute;
  "/_default/bottles/$bottleId/tastings": typeof DefaultBottlesBottleIdTastingsRoute;
  "/_default/entities/$entityId/aliases": typeof DefaultEntitiesEntityIdAliasesRoute;
  "/_default/entities/$entityId/bottles": typeof DefaultEntitiesEntityIdBottlesRoute;
  "/_default/entities/$entityId/codes": typeof DefaultEntitiesEntityIdCodesRoute;
  "/_default/entities/$entityId/tastings": typeof DefaultEntitiesEntityIdTastingsRoute;
  "/_default/flights/$flightId/edit": typeof DefaultFlightsFlightIdEditRoute;
  "/_default/flights/$flightId/overlay": typeof DefaultFlightsFlightIdOverlayRoute;
  "/_default/locations/$countrySlug/regions": typeof DefaultLocationsCountrySlugRegionsRouteWithChildren;
  "/_default/tastings/$tastingId/edit": typeof DefaultTastingsTastingIdEditRoute;
  "/_default/users/$username/favorites": typeof DefaultUsersUsernameFavoritesRoute;
  "/_default/bottles/$bottleId/": typeof DefaultBottlesBottleIdIndexRoute;
  "/_default/entities/$entityId/": typeof DefaultEntitiesEntityIdIndexRoute;
  "/_default/locations/$countrySlug/": typeof DefaultLocationsCountrySlugIndexRoute;
  "/_default/users/$username/": typeof DefaultUsersUsernameIndexRoute;
  "/_default/admin/badges/$badgeId/edit": typeof DefaultAdminBadgesBadgeIdEditRoute;
  "/_default/admin/events/$eventId/edit": typeof DefaultAdminEventsEventIdEditRoute;
  "/_default/admin/locations/$countrySlug/edit": typeof DefaultAdminLocationsCountrySlugEditRoute;
  "/_default/admin/sites/$siteId/edit": typeof DefaultAdminSitesSiteIdEditRoute;
  "/_default/admin/sites/$siteId/reviews": typeof DefaultAdminSitesSiteIdReviewsRoute;
  "/_default/admin/tags/$tagId/edit": typeof DefaultAdminTagsTagIdEditRoute;
  "/_default/locations/$countrySlug/regions/$regionSlug": typeof DefaultLocationsCountrySlugRegionsRegionSlugRoute;
  "/_default/admin/locations/$countrySlug/": typeof DefaultAdminLocationsCountrySlugIndexRoute;
  "/_default/admin/sites/$siteId/": typeof DefaultAdminSitesSiteIdIndexRoute;
  "/_default/admin/locations/$countrySlug/regions/$regionSlug": typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugRouteWithChildren;
  "/_default/admin/locations/$countrySlug/regions/add": typeof DefaultAdminLocationsCountrySlugRegionsAddRoute;
  "/_default/bottles/$bottleId/releases/$releaseId/edit": typeof DefaultBottlesBottleIdReleasesReleaseIdEditRoute;
  "/_default/admin/locations/$countrySlug/regions/$regionSlug/edit": typeof DefaultAdminLocationsCountrySlugRegionsRegionSlugEditRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/addBottle"
    | "/addEntity"
    | "/addFlight"
    | "/about"
    | "/admin"
    | "/favorites"
    | "/friends"
    | "/locations"
    | "/login"
    | "/not-found"
    | "/notifications"
    | "/password-reset"
    | "/register"
    | "/search"
    | "/settings"
    | "/updates"
    | "/verify"
    | "/"
    | "/activity/friends"
    | "/activity/local"
    | "/admin/badges"
    | "/admin/events"
    | "/admin/locations"
    | "/admin/queue"
    | "/admin/sites"
    | "/admin/tags"
    | "/admin/users"
    | "/badges/$badgeId"
    | "/bottles/$bottleId"
    | "/entities/$entityId"
    | "/flights/$flightId"
    | "/locations/$countrySlug"
    | "/locations/all-regions"
    | "/notifications/all"
    | "/tastings/$tastingId"
    | "/users/$username"
    | "/bottles/$bottleId/addRelease"
    | "/bottles/$bottleId/addTasting"
    | "/entities/$entityId/edit"
    | "/entities/$entityId/merge"
    | "/admin/"
    | "/bottlers"
    | "/bottles"
    | "/brands"
    | "/distillers"
    | "/flights"
    | "/tastings"
    | "/admin/badges/$badgeId"
    | "/admin/badges/add"
    | "/admin/events/$eventId"
    | "/admin/events/add"
    | "/admin/locations/$countrySlug"
    | "/admin/sites/$siteId"
    | "/admin/sites/add"
    | "/admin/tags/$tagId"
    | "/admin/tags/add"
    | "/bottles/$bottleId/aliases"
    | "/bottles/$bottleId/edit"
    | "/bottles/$bottleId/merge"
    | "/bottles/$bottleId/prices"
    | "/bottles/$bottleId/releases"
    | "/bottles/$bottleId/similar"
    | "/bottles/$bottleId/tastings"
    | "/entities/$entityId/aliases"
    | "/entities/$entityId/bottles"
    | "/entities/$entityId/codes"
    | "/entities/$entityId/tastings"
    | "/flights/$flightId/edit"
    | "/flights/$flightId/overlay"
    | "/locations/$countrySlug/regions"
    | "/tastings/$tastingId/edit"
    | "/users/$username/favorites"
    | "/bottles/$bottleId/"
    | "/entities/$entityId/"
    | "/locations/$countrySlug/"
    | "/users/$username/"
    | "/admin/badges/$badgeId/edit"
    | "/admin/events/$eventId/edit"
    | "/admin/locations/$countrySlug/edit"
    | "/admin/sites/$siteId/edit"
    | "/admin/sites/$siteId/reviews"
    | "/admin/tags/$tagId/edit"
    | "/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/"
    | "/admin/sites/$siteId/"
    | "/admin/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/regions/add"
    | "/bottles/$bottleId/releases/$releaseId/edit"
    | "/admin/locations/$countrySlug/regions/$regionSlug/edit";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/addBottle"
    | "/addEntity"
    | "/addFlight"
    | "/about"
    | "/favorites"
    | "/friends"
    | "/locations"
    | "/login"
    | "/not-found"
    | "/notifications"
    | "/password-reset"
    | "/register"
    | "/search"
    | "/settings"
    | "/updates"
    | "/verify"
    | "/"
    | "/activity/friends"
    | "/activity/local"
    | "/admin/badges"
    | "/admin/events"
    | "/admin/locations"
    | "/admin/queue"
    | "/admin/sites"
    | "/admin/tags"
    | "/admin/users"
    | "/badges/$badgeId"
    | "/flights/$flightId"
    | "/locations/all-regions"
    | "/notifications/all"
    | "/tastings/$tastingId"
    | "/bottles/$bottleId/addRelease"
    | "/bottles/$bottleId/addTasting"
    | "/entities/$entityId/edit"
    | "/entities/$entityId/merge"
    | "/admin"
    | "/bottlers"
    | "/bottles"
    | "/brands"
    | "/distillers"
    | "/flights"
    | "/tastings"
    | "/admin/badges/$badgeId"
    | "/admin/badges/add"
    | "/admin/events/$eventId"
    | "/admin/events/add"
    | "/admin/sites/add"
    | "/admin/tags/$tagId"
    | "/admin/tags/add"
    | "/bottles/$bottleId/aliases"
    | "/bottles/$bottleId/edit"
    | "/bottles/$bottleId/merge"
    | "/bottles/$bottleId/prices"
    | "/bottles/$bottleId/releases"
    | "/bottles/$bottleId/similar"
    | "/bottles/$bottleId/tastings"
    | "/entities/$entityId/aliases"
    | "/entities/$entityId/bottles"
    | "/entities/$entityId/codes"
    | "/entities/$entityId/tastings"
    | "/flights/$flightId/edit"
    | "/flights/$flightId/overlay"
    | "/locations/$countrySlug/regions"
    | "/tastings/$tastingId/edit"
    | "/users/$username/favorites"
    | "/bottles/$bottleId"
    | "/entities/$entityId"
    | "/locations/$countrySlug"
    | "/users/$username"
    | "/admin/badges/$badgeId/edit"
    | "/admin/events/$eventId/edit"
    | "/admin/locations/$countrySlug/edit"
    | "/admin/sites/$siteId/edit"
    | "/admin/sites/$siteId/reviews"
    | "/admin/tags/$tagId/edit"
    | "/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug"
    | "/admin/sites/$siteId"
    | "/admin/locations/$countrySlug/regions/$regionSlug"
    | "/admin/locations/$countrySlug/regions/add"
    | "/bottles/$bottleId/releases/$releaseId/edit"
    | "/admin/locations/$countrySlug/regions/$regionSlug/edit";
  id:
    | "__root__"
    | "/_default"
    | "/addBottle"
    | "/addEntity"
    | "/addFlight"
    | "/_default/about"
    | "/_default/admin"
    | "/_default/favorites"
    | "/_default/friends"
    | "/_default/locations"
    | "/_default/login"
    | "/_default/not-found"
    | "/_default/notifications"
    | "/_default/password-reset"
    | "/_default/register"
    | "/_default/search"
    | "/_default/settings"
    | "/_default/updates"
    | "/_default/verify"
    | "/_default/"
    | "/_default/activity/friends"
    | "/_default/activity/local"
    | "/_default/admin/badges"
    | "/_default/admin/events"
    | "/_default/admin/locations"
    | "/_default/admin/queue"
    | "/_default/admin/sites"
    | "/_default/admin/tags"
    | "/_default/admin/users"
    | "/_default/badges/$badgeId"
    | "/_default/bottles/$bottleId"
    | "/_default/entities/$entityId"
    | "/_default/flights/$flightId"
    | "/_default/locations/$countrySlug"
    | "/_default/locations/all-regions"
    | "/_default/notifications/all"
    | "/_default/tastings/$tastingId"
    | "/_default/users/$username"
    | "/bottles_/$bottleId/addRelease"
    | "/bottles_/$bottleId/addTasting"
    | "/entities_/$entityId/edit"
    | "/entities_/$entityId/merge"
    | "/_default/admin/"
    | "/_default/bottlers/"
    | "/_default/bottles/"
    | "/_default/brands/"
    | "/_default/distillers/"
    | "/_default/flights/"
    | "/_default/tastings/"
    | "/_default/admin/badges/$badgeId"
    | "/_default/admin/badges/add"
    | "/_default/admin/events/$eventId"
    | "/_default/admin/events/add"
    | "/_default/admin/locations/$countrySlug"
    | "/_default/admin/sites/$siteId"
    | "/_default/admin/sites/add"
    | "/_default/admin/tags/$tagId"
    | "/_default/admin/tags/add"
    | "/_default/bottles/$bottleId/aliases"
    | "/_default/bottles/$bottleId/edit"
    | "/_default/bottles/$bottleId/merge"
    | "/_default/bottles/$bottleId/prices"
    | "/_default/bottles/$bottleId/releases"
    | "/_default/bottles/$bottleId/similar"
    | "/_default/bottles/$bottleId/tastings"
    | "/_default/entities/$entityId/aliases"
    | "/_default/entities/$entityId/bottles"
    | "/_default/entities/$entityId/codes"
    | "/_default/entities/$entityId/tastings"
    | "/_default/flights/$flightId/edit"
    | "/_default/flights/$flightId/overlay"
    | "/_default/locations/$countrySlug/regions"
    | "/_default/tastings/$tastingId/edit"
    | "/_default/users/$username/favorites"
    | "/_default/bottles/$bottleId/"
    | "/_default/entities/$entityId/"
    | "/_default/locations/$countrySlug/"
    | "/_default/users/$username/"
    | "/_default/admin/badges/$badgeId/edit"
    | "/_default/admin/events/$eventId/edit"
    | "/_default/admin/locations/$countrySlug/edit"
    | "/_default/admin/sites/$siteId/edit"
    | "/_default/admin/sites/$siteId/reviews"
    | "/_default/admin/tags/$tagId/edit"
    | "/_default/locations/$countrySlug/regions/$regionSlug"
    | "/_default/admin/locations/$countrySlug/"
    | "/_default/admin/sites/$siteId/"
    | "/_default/admin/locations/$countrySlug/regions/$regionSlug"
    | "/_default/admin/locations/$countrySlug/regions/add"
    | "/_default/bottles/$bottleId/releases/$releaseId/edit"
    | "/_default/admin/locations/$countrySlug/regions/$regionSlug/edit";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  DefaultRoute: typeof DefaultRouteWithChildren;
  AddBottleRoute: typeof AddBottleRoute;
  AddEntityRoute: typeof AddEntityRoute;
  AddFlightRoute: typeof AddFlightRoute;
  BottlesBottleIdAddReleaseRoute: typeof BottlesBottleIdAddReleaseRoute;
  BottlesBottleIdAddTastingRoute: typeof BottlesBottleIdAddTastingRoute;
  EntitiesEntityIdEditRoute: typeof EntitiesEntityIdEditRoute;
  EntitiesEntityIdMergeRoute: typeof EntitiesEntityIdMergeRoute;
}

const rootRouteChildren: RootRouteChildren = {
  DefaultRoute: DefaultRouteWithChildren,
  AddBottleRoute: AddBottleRoute,
  AddEntityRoute: AddEntityRoute,
  AddFlightRoute: AddFlightRoute,
  BottlesBottleIdAddReleaseRoute: BottlesBottleIdAddReleaseRoute,
  BottlesBottleIdAddTastingRoute: BottlesBottleIdAddTastingRoute,
  EntitiesEntityIdEditRoute: EntitiesEntityIdEditRoute,
  EntitiesEntityIdMergeRoute: EntitiesEntityIdMergeRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_default",
        "/addBottle",
        "/addEntity",
        "/addFlight",
        "/bottles_/$bottleId/addRelease",
        "/bottles_/$bottleId/addTasting",
        "/entities_/$entityId/edit",
        "/entities_/$entityId/merge"
      ]
    },
    "/_default": {
      "filePath": "_default.tsx",
      "children": [
        "/_default/about",
        "/_default/admin",
        "/_default/favorites",
        "/_default/friends",
        "/_default/locations",
        "/_default/login",
        "/_default/not-found",
        "/_default/notifications",
        "/_default/password-reset",
        "/_default/register",
        "/_default/search",
        "/_default/settings",
        "/_default/updates",
        "/_default/verify",
        "/_default/",
        "/_default/activity/friends",
        "/_default/activity/local",
        "/_default/badges/$badgeId",
        "/_default/bottles/$bottleId",
        "/_default/entities/$entityId",
        "/_default/flights/$flightId",
        "/_default/tastings/$tastingId",
        "/_default/users/$username",
        "/_default/bottlers/",
        "/_default/bottles/",
        "/_default/brands/",
        "/_default/distillers/",
        "/_default/flights/",
        "/_default/tastings/"
      ]
    },
    "/addBottle": {
      "filePath": "addBottle.tsx"
    },
    "/addEntity": {
      "filePath": "addEntity.tsx"
    },
    "/addFlight": {
      "filePath": "addFlight.tsx"
    },
    "/_default/about": {
      "filePath": "_default/about.tsx",
      "parent": "/_default"
    },
    "/_default/admin": {
      "filePath": "_default/admin.tsx",
      "parent": "/_default",
      "children": [
        "/_default/admin/badges",
        "/_default/admin/events",
        "/_default/admin/locations",
        "/_default/admin/queue",
        "/_default/admin/sites",
        "/_default/admin/tags",
        "/_default/admin/users",
        "/_default/admin/"
      ]
    },
    "/_default/favorites": {
      "filePath": "_default/favorites.tsx",
      "parent": "/_default"
    },
    "/_default/friends": {
      "filePath": "_default/friends.tsx",
      "parent": "/_default"
    },
    "/_default/locations": {
      "filePath": "_default/locations.tsx",
      "parent": "/_default",
      "children": [
        "/_default/locations/$countrySlug",
        "/_default/locations/all-regions"
      ]
    },
    "/_default/login": {
      "filePath": "_default/login.tsx",
      "parent": "/_default"
    },
    "/_default/not-found": {
      "filePath": "_default/not-found.tsx",
      "parent": "/_default"
    },
    "/_default/notifications": {
      "filePath": "_default/notifications.tsx",
      "parent": "/_default",
      "children": [
        "/_default/notifications/all"
      ]
    },
    "/_default/password-reset": {
      "filePath": "_default/password-reset.tsx",
      "parent": "/_default"
    },
    "/_default/register": {
      "filePath": "_default/register.tsx",
      "parent": "/_default"
    },
    "/_default/search": {
      "filePath": "_default/search.tsx",
      "parent": "/_default"
    },
    "/_default/settings": {
      "filePath": "_default/settings.tsx",
      "parent": "/_default"
    },
    "/_default/updates": {
      "filePath": "_default/updates.tsx",
      "parent": "/_default"
    },
    "/_default/verify": {
      "filePath": "_default/verify.tsx",
      "parent": "/_default"
    },
    "/_default/": {
      "filePath": "_default/index.tsx",
      "parent": "/_default"
    },
    "/_default/activity/friends": {
      "filePath": "_default/activity.friends.tsx",
      "parent": "/_default"
    },
    "/_default/activity/local": {
      "filePath": "_default/activity.local.tsx",
      "parent": "/_default"
    },
    "/_default/admin/badges": {
      "filePath": "_default/admin.badges.tsx",
      "parent": "/_default/admin",
      "children": [
        "/_default/admin/badges/$badgeId",
        "/_default/admin/badges/add"
      ]
    },
    "/_default/admin/events": {
      "filePath": "_default/admin.events.tsx",
      "parent": "/_default/admin",
      "children": [
        "/_default/admin/events/$eventId",
        "/_default/admin/events/add"
      ]
    },
    "/_default/admin/locations": {
      "filePath": "_default/admin.locations.tsx",
      "parent": "/_default/admin",
      "children": [
        "/_default/admin/locations/$countrySlug"
      ]
    },
    "/_default/admin/queue": {
      "filePath": "_default/admin.queue.tsx",
      "parent": "/_default/admin"
    },
    "/_default/admin/sites": {
      "filePath": "_default/admin.sites.tsx",
      "parent": "/_default/admin",
      "children": [
        "/_default/admin/sites/$siteId",
        "/_default/admin/sites/add"
      ]
    },
    "/_default/admin/tags": {
      "filePath": "_default/admin.tags.tsx",
      "parent": "/_default/admin",
      "children": [
        "/_default/admin/tags/$tagId",
        "/_default/admin/tags/add"
      ]
    },
    "/_default/admin/users": {
      "filePath": "_default/admin.users.tsx",
      "parent": "/_default/admin"
    },
    "/_default/badges/$badgeId": {
      "filePath": "_default/badges.$badgeId.tsx",
      "parent": "/_default"
    },
    "/_default/bottles/$bottleId": {
      "filePath": "_default/bottles.$bottleId.tsx",
      "parent": "/_default",
      "children": [
        "/_default/bottles/$bottleId/aliases",
        "/_default/bottles/$bottleId/edit",
        "/_default/bottles/$bottleId/merge",
        "/_default/bottles/$bottleId/prices",
        "/_default/bottles/$bottleId/releases",
        "/_default/bottles/$bottleId/similar",
        "/_default/bottles/$bottleId/tastings",
        "/_default/bottles/$bottleId/"
      ]
    },
    "/_default/entities/$entityId": {
      "filePath": "_default/entities.$entityId.tsx",
      "parent": "/_default",
      "children": [
        "/_default/entities/$entityId/aliases",
        "/_default/entities/$entityId/bottles",
        "/_default/entities/$entityId/codes",
        "/_default/entities/$entityId/tastings",
        "/_default/entities/$entityId/"
      ]
    },
    "/_default/flights/$flightId": {
      "filePath": "_default/flights.$flightId.tsx",
      "parent": "/_default",
      "children": [
        "/_default/flights/$flightId/edit",
        "/_default/flights/$flightId/overlay"
      ]
    },
    "/_default/locations/$countrySlug": {
      "filePath": "_default/locations.$countrySlug.tsx",
      "parent": "/_default/locations",
      "children": [
        "/_default/locations/$countrySlug/regions",
        "/_default/locations/$countrySlug/"
      ]
    },
    "/_default/locations/all-regions": {
      "filePath": "_default/locations.all-regions.tsx",
      "parent": "/_default/locations"
    },
    "/_default/notifications/all": {
      "filePath": "_default/notifications.all.tsx",
      "parent": "/_default/notifications"
    },
    "/_default/tastings/$tastingId": {
      "filePath": "_default/tastings.$tastingId.tsx",
      "parent": "/_default",
      "children": [
        "/_default/tastings/$tastingId/edit"
      ]
    },
    "/_default/users/$username": {
      "filePath": "_default/users.$username.tsx",
      "parent": "/_default",
      "children": [
        "/_default/users/$username/favorites",
        "/_default/users/$username/"
      ]
    },
    "/bottles_/$bottleId/addRelease": {
      "filePath": "bottles_.$bottleId.addRelease.tsx"
    },
    "/bottles_/$bottleId/addTasting": {
      "filePath": "bottles_.$bottleId.addTasting.tsx"
    },
    "/entities_/$entityId/edit": {
      "filePath": "entities_.$entityId.edit.tsx"
    },
    "/entities_/$entityId/merge": {
      "filePath": "entities_.$entityId.merge.tsx"
    },
    "/_default/admin/": {
      "filePath": "_default/admin.index.tsx",
      "parent": "/_default/admin"
    },
    "/_default/bottlers/": {
      "filePath": "_default/bottlers.index.tsx",
      "parent": "/_default"
    },
    "/_default/bottles/": {
      "filePath": "_default/bottles.index.tsx",
      "parent": "/_default"
    },
    "/_default/brands/": {
      "filePath": "_default/brands.index.tsx",
      "parent": "/_default"
    },
    "/_default/distillers/": {
      "filePath": "_default/distillers.index.tsx",
      "parent": "/_default"
    },
    "/_default/flights/": {
      "filePath": "_default/flights.index.tsx",
      "parent": "/_default"
    },
    "/_default/tastings/": {
      "filePath": "_default/tastings.index.tsx",
      "parent": "/_default"
    },
    "/_default/admin/badges/$badgeId": {
      "filePath": "_default/admin.badges.$badgeId.tsx",
      "parent": "/_default/admin/badges",
      "children": [
        "/_default/admin/badges/$badgeId/edit"
      ]
    },
    "/_default/admin/badges/add": {
      "filePath": "_default/admin.badges.add.tsx",
      "parent": "/_default/admin/badges"
    },
    "/_default/admin/events/$eventId": {
      "filePath": "_default/admin.events.$eventId.tsx",
      "parent": "/_default/admin/events",
      "children": [
        "/_default/admin/events/$eventId/edit"
      ]
    },
    "/_default/admin/events/add": {
      "filePath": "_default/admin.events.add.tsx",
      "parent": "/_default/admin/events"
    },
    "/_default/admin/locations/$countrySlug": {
      "filePath": "_default/admin.locations.$countrySlug.tsx",
      "parent": "/_default/admin/locations",
      "children": [
        "/_default/admin/locations/$countrySlug/edit",
        "/_default/admin/locations/$countrySlug/",
        "/_default/admin/locations/$countrySlug/regions/$regionSlug",
        "/_default/admin/locations/$countrySlug/regions/add"
      ]
    },
    "/_default/admin/sites/$siteId": {
      "filePath": "_default/admin.sites.$siteId.tsx",
      "parent": "/_default/admin/sites",
      "children": [
        "/_default/admin/sites/$siteId/edit",
        "/_default/admin/sites/$siteId/reviews",
        "/_default/admin/sites/$siteId/"
      ]
    },
    "/_default/admin/sites/add": {
      "filePath": "_default/admin.sites.add.tsx",
      "parent": "/_default/admin/sites"
    },
    "/_default/admin/tags/$tagId": {
      "filePath": "_default/admin.tags.$tagId.tsx",
      "parent": "/_default/admin/tags",
      "children": [
        "/_default/admin/tags/$tagId/edit"
      ]
    },
    "/_default/admin/tags/add": {
      "filePath": "_default/admin.tags.add.tsx",
      "parent": "/_default/admin/tags"
    },
    "/_default/bottles/$bottleId/aliases": {
      "filePath": "_default/bottles.$bottleId.aliases.tsx",
      "parent": "/_default/bottles/$bottleId"
    },
    "/_default/bottles/$bottleId/edit": {
      "filePath": "_default/bottles.$bottleId.edit.tsx",
      "parent": "/_default/bottles/$bottleId"
    },
    "/_default/bottles/$bottleId/merge": {
      "filePath": "_default/bottles.$bottleId.merge.tsx",
      "parent": "/_default/bottles/$bottleId"
    },
    "/_default/bottles/$bottleId/prices": {
      "filePath": "_default/bottles.$bottleId.prices.tsx",
      "parent": "/_default/bottles/$bottleId"
    },
    "/_default/bottles/$bottleId/releases": {
      "filePath": "_default/bottles.$bottleId.releases.tsx",
      "parent": "/_default/bottles/$bottleId",
      "children": [
        "/_default/bottles/$bottleId/releases/$releaseId/edit"
      ]
    },
    "/_default/bottles/$bottleId/similar": {
      "filePath": "_default/bottles.$bottleId.similar.tsx",
      "parent": "/_default/bottles/$bottleId"
    },
    "/_default/bottles/$bottleId/tastings": {
      "filePath": "_default/bottles.$bottleId.tastings.tsx",
      "parent": "/_default/bottles/$bottleId"
    },
    "/_default/entities/$entityId/aliases": {
      "filePath": "_default/entities.$entityId.aliases.tsx",
      "parent": "/_default/entities/$entityId"
    },
    "/_default/entities/$entityId/bottles": {
      "filePath": "_default/entities.$entityId.bottles.tsx",
      "parent": "/_default/entities/$entityId"
    },
    "/_default/entities/$entityId/codes": {
      "filePath": "_default/entities.$entityId.codes.tsx",
      "parent": "/_default/entities/$entityId"
    },
    "/_default/entities/$entityId/tastings": {
      "filePath": "_default/entities.$entityId.tastings.tsx",
      "parent": "/_default/entities/$entityId"
    },
    "/_default/flights/$flightId/edit": {
      "filePath": "_default/flights.$flightId.edit.tsx",
      "parent": "/_default/flights/$flightId"
    },
    "/_default/flights/$flightId/overlay": {
      "filePath": "_default/flights.$flightId.overlay.tsx",
      "parent": "/_default/flights/$flightId"
    },
    "/_default/locations/$countrySlug/regions": {
      "filePath": "_default/locations.$countrySlug.regions.tsx",
      "parent": "/_default/locations/$countrySlug",
      "children": [
        "/_default/locations/$countrySlug/regions/$regionSlug"
      ]
    },
    "/_default/tastings/$tastingId/edit": {
      "filePath": "_default/tastings.$tastingId.edit.tsx",
      "parent": "/_default/tastings/$tastingId"
    },
    "/_default/users/$username/favorites": {
      "filePath": "_default/users.$username.favorites.tsx",
      "parent": "/_default/users/$username"
    },
    "/_default/bottles/$bottleId/": {
      "filePath": "_default/bottles.$bottleId.index.tsx",
      "parent": "/_default/bottles/$bottleId"
    },
    "/_default/entities/$entityId/": {
      "filePath": "_default/entities.$entityId.index.tsx",
      "parent": "/_default/entities/$entityId"
    },
    "/_default/locations/$countrySlug/": {
      "filePath": "_default/locations.$countrySlug.index.tsx",
      "parent": "/_default/locations/$countrySlug"
    },
    "/_default/users/$username/": {
      "filePath": "_default/users.$username.index.tsx",
      "parent": "/_default/users/$username"
    },
    "/_default/admin/badges/$badgeId/edit": {
      "filePath": "_default/admin.badges.$badgeId.edit.tsx",
      "parent": "/_default/admin/badges/$badgeId"
    },
    "/_default/admin/events/$eventId/edit": {
      "filePath": "_default/admin.events.$eventId.edit.tsx",
      "parent": "/_default/admin/events/$eventId"
    },
    "/_default/admin/locations/$countrySlug/edit": {
      "filePath": "_default/admin.locations.$countrySlug.edit.tsx",
      "parent": "/_default/admin/locations/$countrySlug"
    },
    "/_default/admin/sites/$siteId/edit": {
      "filePath": "_default/admin.sites.$siteId.edit.tsx",
      "parent": "/_default/admin/sites/$siteId"
    },
    "/_default/admin/sites/$siteId/reviews": {
      "filePath": "_default/admin.sites.$siteId.reviews.tsx",
      "parent": "/_default/admin/sites/$siteId"
    },
    "/_default/admin/tags/$tagId/edit": {
      "filePath": "_default/admin.tags.$tagId.edit.tsx",
      "parent": "/_default/admin/tags/$tagId"
    },
    "/_default/locations/$countrySlug/regions/$regionSlug": {
      "filePath": "_default/locations.$countrySlug.regions.$regionSlug.tsx",
      "parent": "/_default/locations/$countrySlug/regions"
    },
    "/_default/admin/locations/$countrySlug/": {
      "filePath": "_default/admin.locations.$countrySlug.index.tsx",
      "parent": "/_default/admin/locations/$countrySlug"
    },
    "/_default/admin/sites/$siteId/": {
      "filePath": "_default/admin.sites.$siteId.index.tsx",
      "parent": "/_default/admin/sites/$siteId"
    },
    "/_default/admin/locations/$countrySlug/regions/$regionSlug": {
      "filePath": "_default/admin.locations.$countrySlug.regions.$regionSlug.tsx",
      "parent": "/_default/admin/locations/$countrySlug",
      "children": [
        "/_default/admin/locations/$countrySlug/regions/$regionSlug/edit"
      ]
    },
    "/_default/admin/locations/$countrySlug/regions/add": {
      "filePath": "_default/admin.locations.$countrySlug.regions.add.tsx",
      "parent": "/_default/admin/locations/$countrySlug"
    },
    "/_default/bottles/$bottleId/releases/$releaseId/edit": {
      "filePath": "_default/bottles.$bottleId.releases.$releaseId.edit.tsx",
      "parent": "/_default/bottles/$bottleId/releases"
    },
    "/_default/admin/locations/$countrySlug/regions/$regionSlug/edit": {
      "filePath": "_default/admin.locations.$countrySlug.regions.$regionSlug.edit.tsx",
      "parent": "/_default/admin/locations/$countrySlug/regions/$regionSlug"
    }
  }
}
ROUTE_MANIFEST_END */
