generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int     @id @default(autoincrement())
    email        String  @unique
    passwordHash String?
    displayName  String?
    pictureUrl   String?

    active Boolean @default(true)
    admin  Boolean @default(false)

    createdAt DateTime @default(now())

    checkins   Checkin[]
    identities Identity[]
    brands     Brand[]
    distillers Distiller[]
    bottles    Bottle[]
    changes    Change[]
    editions   Edition[]

    @@map("user")
}

enum IdentityProvider {
    google
}

model Identity {
    id Int @id @default(autoincrement())

    provider   IdentityProvider
    externalId String

    userId Int
    user   User @relation(fields: [userId], references: [id])

    @@unique([provider, externalId])
    @@map("identity")
}

enum Category {
    blend
    bourbon
    rye
    single_grain
    single_malt
    spirit
}

// e.g. Hibiki, Glenlivet
model Brand {
    id   Int    @id @default(autoincrement())
    name String @unique

    country String?
    region  String?

    public Boolean @default(true)

    createdAt   DateTime @default(now())
    createdById Int?
    createdBy   User?    @relation(fields: [createdById], references: [id])

    bottles Bottle[]

    @@map("brand")
}

model Distiller {
    id   Int    @id @default(autoincrement())
    name String @unique

    country String?
    region  String?

    public Boolean @default(true)

    createdAt   DateTime @default(now())
    createdById Int?
    createdBy   User?    @relation(fields: [createdById], references: [id])

    bottles Bottle[]

    @@map("distiller")
}

// Bottles are unique to their (name, brand, series), and the rest of the attributes are considered optional facts
model Bottle {
    id        Int       @id @default(autoincrement())
    name      String
    brandId   Int
    brand     Brand     @relation(fields: [brandId], references: [id])
    category  Category?
    statedAge Int?

    public Boolean @default(true)

    createdAt   DateTime @default(now())
    createdById Int?
    createdBy   User?    @relation(fields: [createdById], references: [id])

    distillers Distiller[]
    checkins   Checkin[]
    editions   Edition[]

    @@unique([name, brandId])
    @@map("bottle")
}

// A variation is commonly a single barrel bottle.
// The name may be something like "Healthy Spirits" (a liquor store collab).
model Edition {
    id Int @id @default(autoincrement())

    bottleId Int
    bottle   Bottle @relation(fields: [bottleId], references: [id])
    name     String
    barrel   Int?

    createdAt   DateTime @default(now())
    createdById Int?
    createdBy   User?    @relation(fields: [createdById], references: [id])

    checkins Checkin[]

    @@unique([bottleId, name, barrel])
    @@map("edition")
}

model Checkin {
    id        Int      @id @default(autoincrement())
    bottleId  Int
    bottle    Bottle   @relation(fields: [bottleId], references: [id])
    editionId Int?
    edition   Edition? @relation(fields: [editionId], references: [id])
    // location

    tastingNotes String?
    tags         String[]
    // friends      String[]
    rating       Float
    imageUrl     String?
    userId       Int
    user         User     @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())

    @@map("checkin")
}

// locations are where you're checking-in from (e.g. a bar, a distillery)
// model Location {
//     id   Int    @id @default(autoincrement())
//     name String
// @@map("location")
// }

model Change {
    id     Int  @id @default(autoincrement())
    userId Int
    user   User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())

    objectType String
    objectId   Int
    data       String
}
